#!/bin/sh
#
# Part of XigmaNAS® (https://www.xigmanas.com).
# Copyright © 2018-2023 XigmaNAS® <info@xigmanas.com>.
# All rights reserved.
#

# System startup script run by init on autoboot
# or after single-user.
# Output and error are redirected to console by init,
# and the console is the controlling terminal.

# Note that almost all of the user-configurable behavior is no longer in
# this file, but rather in /etc/defaults/rc.conf.  Please check that file
# first before contemplating any changes here.  If you do need to change
# this file for some reason, we would like to know about it.

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Boot interrupted'; exit 1" 3

HOME=/
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
export HOME
export PATH

# Get operating platform
PLATFORM=$(/bin/cat /etc/platform)
XARCH=$(/bin/echo ${PLATFORM} | /usr/bin/sed -e 's/-.*//')
ARCH=$(/usr/bin/uname -m)
ZROOT=$(/sbin/mount | awk -F '/' '/ \/ / {print $1}')

# Fixed values requested by build/make.sh
MDLOCALSIZE=1312m
SWAPSIZE=512m

# XigmaNAS® request 2GB for swapless running
mem=$(/sbin/sysctl -n hw.physmem)
mem=$(/bin/expr ${mem} / 1024 / 1024)
BOOT_LOWMEM=0
BOOT_LIVECD=0
if [ "${mem}" -le 1536 ]; then
	# less than or equal to 1.5GB
	echo "Booting with low memory"
	BOOT_LOWMEM=1
fi
export BOOT_LOWMEM
export BOOT_LIVECD
#/bin/kenv -q boot_lowmem=${BOOT_LOWMEM} > /dev/null

platform_wait() {
	local _retry _retry_zzz retry_loops

	_retry=0
#	Wait interval
	_retry_zzz=5
#	Max retries for platform to become ready
	_retry_loops=15
#	Wait for the platform device/label to be ready before halt.
	while ! /sbin/glabel status -s | /usr/bin/grep -q "${BOOT_PLATFORM}"; do
		if [ "${_retry}" -ge "${_retry_loops}" ]; then
			echo "Waiting for ${BOOT_PLATFORM} retries exhausted!"
			sleep 30; halt
		fi
		_retry=$(/bin/expr ${_retry} + 1); sleep ${_retry_zzz}
	done
}

case ${PLATFORM} in
	*-full)
		if ! zpool list -H -o bootfs | grep -qw "${ZROOT}/ROOT"; then
			# Do a fsck on root file system.
			/etc/rc.d/fsck root
		fi
		# If running from full, mount the root (/) in read-write.
			/sbin/mount -u -o rw /
		;;
	*)
		# If running from liveCD or embedded, mount the root (ramdisk) in read-write.
		/sbin/mount -u -o rw,noatime,acls /dev/md0 /

		# Timer
		sleep 3
		md=$(/sbin/mdconfig -t malloc -o compress -s ${MDLOCALSIZE})
		case ${PLATFORM} in
			*-liveUSB)
				BOOT_PLATFORM="ufs/liveboot"
				platform_wait
				/bin/echo "Creating 2nd memory disk for ${PLATFORM}"
				# To deal with "the secondary GPT header is not in the last LBA."
				SYSUFS=$(glabel status -s | grep -q "ufs\/liveboot"; echo $?)
				GPTUSB=$(glabel status -s | awk '/gpt\/usbsysdisk/{print $3}' | tr -d 'p3')
				if [ "${SYSUFS}" -eq 0 ]; then
					if [ -n "${GPTUSB}" ]; then
						if gpart show "${GPTUSB}" | grep -q "CORRUPT"; then
							gpart recover ${GPTUSB} > /dev/null 2>&1
						fi
					fi
				fi

				root=$(/sbin/glabel status -s | /usr/bin/awk '/liveboot/{print $3;exit 0}')
				gptswap=$(/sbin/glabel status -s | /usr/bin/awk '/gptswap/{print $3;exit 0}')
				if [ -z "${root}" ]; then
					echo "can't determine rootfs"
					sleep 30; halt
				fi

				# use default swap if exists
				swap=$(/bin/echo ${root} | /usr/bin/sed -e 's/s[1234]a$/s2b/')
				if [ -n "${gptswap}" -a -e "/dev/${gptswap}" ]; then
					swap=$gptswap
				elif [ "${swap}" = "${root}" ]; then
					swap=NONE
				fi
				rm -f /etc/swapdevice
				if [ "${BOOT_LOWMEM}" -ne 0 ]; then
					if [ "${swap}" != "NONE" -a -e "/dev/${swap}" ]; then
						/sbin/swapon /dev/${swap}
						echo "/dev/${swap}" > /etc/swapdevice
					else
						echo "swap device is not found"
					fi
				else
					if [ "${swap}" != "NONE" -a -e "/dev/${swap}" ]; then
						/sbin/swapon /dev/${swap}
						echo "/dev/${swap}" > /etc/swapdevice
					fi
				fi

				/sbin/mount -r /dev/${root} /mnt
				if [ -f "/mnt/mdlocal.xz" ]; then
					/usr/bin/xz -dcv /mnt/mdlocal.xz | /bin/dd of=/dev/${md} bs=1m status=none
				else
					echo "can't find mdlocal"
					sleep 30; halt
				fi
				/sbin/umount /mnt
				;;
			*-embedded)
				BOOT_PLATFORM="embboot"
				platform_wait
				/bin/echo "Creating 2nd memory disk for ${PLATFORM}"
				root=$(/sbin/glabel status -s | /usr/bin/awk '/embboot/{print $3;exit 0}')
				gptswap=$(/sbin/glabel status -s | /usr/bin/awk '/gptswap/{print $3;exit 0}')
				if [ -z "${root}" ]; then
					echo "can't determine rootfs"
					sleep 30; halt
				else
					BOOTDEVICE="${root}"
					export BOOTDEVICE
				fi

				# use default swap if exists
				swap=$(/bin/echo ${root} | /usr/bin/sed -e 's/s[1234]a$/s2b/')
				if [ -n "${gptswap}" -a -e "/dev/${gptswap}" ]; then
					swap=$gptswap
				elif [ "${swap}" = "${root}" ]; then
					swap=NONE
				fi
				rm -f /etc/swapdevice
				if [ "${BOOT_LOWMEM}" -ne 0 ]; then
					if [ "${swap}" != "NONE" -a -e "/dev/${swap}" ]; then
						/sbin/swapon /dev/${swap}
						echo "/dev/${swap}" > /etc/swapdevice
					else
						echo "swap device is not found"
					fi
				else
					if [ "${swap}" != "NONE" -a -e "/dev/${swap}" ]; then
						/sbin/swapon /dev/${swap}
						echo "/dev/${swap}" > /etc/swapdevice
					fi
				fi

				/sbin/mount -r /dev/${root} /mnt
				if [ -f "/mnt/mdlocal.xz" ]; then
					/usr/bin/xz -dcv /mnt/mdlocal.xz | /bin/dd of=/dev/${md} bs=1m status=none
				else
					echo "can't find mdlocal"
					sleep 30; halt
				fi

				/sbin/umount /mnt
				;;
			*-liveCD)
				BOOT_LIVECD=1
				BOOT_PLATFORM="LiveCD"
				platform_wait
				/bin/echo "Creating 2nd memory disk for ${PLATFORM}"
				root=$(/sbin/glabel status -s | /usr/bin/awk '/LiveCD/{print $3;exit 0}')
				if [ -z "${root}" ]; then
					echo "can't determine rootfs"
					sleep 30; halt
				fi
				swap=NONE
				rm -f /etc/swapdevice

				/sbin/mount -t cd9660 /dev/${root} /mnt
				if [ "${BOOT_LOWMEM}" -ne 0 ]; then
					# no live mode, installation only
					if [ -f "/mnt/mdlocal-mini.xz" ]; then
						/usr/bin/xz -dcv /mnt/mdlocal-mini.xz | /bin/dd of=/dev/${md} bs=1m status=none
					else
						echo "can't find mdlocal-mini"
						sleep 30; halt
					fi
				elif [ -f "/mnt/mdlocal.xz" ]; then
					/usr/bin/xz -dcv /mnt/mdlocal.xz | /bin/dd of=/dev/${md} bs=1m status=none
				else
					echo "can't find mdlocal"
					sleep 30; halt
				fi
				/sbin/umount /mnt
				;;
			*)
				;;
		esac
		/sbin/mount -o noatime,acls /dev/${md} /usr/local
		;;
esac
echo "${BOOT_LOWMEM}" > /etc/boot_lowmem

# Create required directories in /var
for dir in /var/run /var/log /var/etc /var/etc/ssh /var/etc/ssl/private /var/etc/private /var/etc/iscsi /var/etc/netatalk /var/db /var/mount /var/empty /var/backups /var/cron /var/cron/tabs /var/spool /var/spool/lock; do
	[ ! -d "${dir}" ] && mkdir -p ${dir}
done
chmod 0750 /var/backups /var/cron /var/cron/tabs
if [ ! -d "/var/tmp" ]; then
	mkdir -p /var/tmp
	chmod 1777 /var/tmp
fi

# Make writable tmp for www
chown -h 0:0 /tmp
chmod -h 1777 /tmp
chown 0:0 /var/tmp
chmod 1777 /var/tmp

# Remove existing cache and notify
/bin/rm -f /tmp/config.cache
/bin/rm -f /var/db/updatenotify.db

# Configure the shared library cache
/sbin/ldconfig -elf /usr/lib /usr/local/lib /lib

# Add the path of full boot disk
/sbin/kldconfig -f -U /boot/kernel
# Add the path of embedded boot disk
/sbin/kldconfig -f -U /cf/boot/kernel

# Let the PHP functions know we're booting
BOOTING=1
export BOOTING

if [ "$1" = "autoboot" ]; then
	autoboot=yes
	_boot="faststart"
	rc_fast=yes        # run_rc_command(): do fast booting
else
	autoboot=no
	_boot="quietstart"
fi

_localbase=$(/sbin/sysctl -n user.localbase 2> /dev/null)

dlv=$(/sbin/sysctl -n vfs.nfs.diskless_valid 2> /dev/null)
if [ "${dlv:=0}" -ne 0 -o -f "/etc/diskless" ]; then
	sh /etc/rc.initdiskless
fi

# Run these after determining whether we are booting diskless in order
# to minimize the number of files that are needed on a diskless system,
# and to make the configuration file variables available to rc itself.
#
. /etc/rc.subr
echo "Loading configuration files."
load_rc_config 'XXX'

# If we receive a SIGALRM, re-source /etc/rc.conf; this allows rc.d
# scripts to perform "boot-time configuration" including enabling and
# disabling rc.d scripts which appear later in the boot order.
trap "_rc_conf_loaded=false; load_rc_config" ALRM

skip="-s nostart"
if [ $(/sbin/sysctl -n security.jail.jailed) -eq 1 ]; then
	skip="$skip -s nojail"
	if [ $(/sbin/sysctl -n security.jail.vnet) -ne 1 ]; then
		skip="$skip -s nojailvnet"
	fi

	if [ "$early_late_divider" = "FILESYSTEMS" ]; then
		early_late_divider=NETWORKING
	fi
fi

# If the firstboot sentinel doesn't exist, we want to skip firstboot scripts.
if ! [ -e "${firstboot_sentinel}" ]; then
	skip_firstboot="-s firstboot"
fi

# Do a first pass to get everything up to $early_late_divider so that
# we can do a second pass that includes $local_startup directories
#
files=$(rcorder ${skip} ${skip_firstboot} /etc/rc.d/* 2>/dev/null)

_rc_elem_done=' '
for _rc_elem in ${files}; do
	run_rc_script ${_rc_elem} ${_boot}
	_rc_elem_done="${_rc_elem_done}${_rc_elem} "

	# Force reloading of rc.conf file
	if [ "${_rc_elem}" = "/etc/rc.d/rcconf" ]; then
		_rc_conf_loaded=false
		load_rc_config ${_rc_elem}
	fi

	case "$_rc_elem" in
	*/${early_late_divider})	break ;;
	esac
done

unset files local_rc

# Now that disks are mounted, for each dir in $local_startup
# search for init scripts that use the new rc.d semantics.
#
case ${local_startup} in
[Nn][Oo] | '') ;;
*)	find_local_scripts_new ;;
esac

# The firstboot sentinel might be on a newly mounted filesystem; look for it
# again and unset skip_firstboot if we find it.
if [ -e "${firstboot_sentinel}" ]; then
	skip_firstboot=""
fi

files=$(rcorder ${skip} ${skip_firstboot} /etc/rc.d/* ${local_rc} 2>/dev/null)
_skip_early=1
for _rc_elem in ${files}; do
	case "$_skip_early" in
	1)	case "$_rc_elem" in
		*/${early_late_divider})	_skip_early=0 ;;
		esac
		continue
		;;
	esac

	run_rc_script ${_rc_elem} ${_boot}
done

# Remove the firstboot sentinel, and reboot if it was requested.
# Be a bit paranoid about removing it to handle the common failure
# modes since the consequence of failure can be big.
# Note: this assumes firstboot_sentinel is on / when we have
# a read-only /, or that it is on media that's writable.
if [ -e "${firstboot_sentinel}" ]; then
		checkyesno root_rw_mount && mount -uw /
	chflags -R 0 ${firstboot_sentinel}
	rm -rf ${firstboot_sentinel}
	if [ -e "${firstboot_sentinel}"-reboot ]; then
		chflags -R 0 ${firstboot_sentinel}-reboot
		rm -rf ${firstboot_sentinel}-reboot
			checkyesno root_rw_mount || mount -ur /
		kill -INT 1
	fi
		checkyesno root_rw_mount || mount -ur /
fi

# Let the PHP functions know we've finished booting
BOOTING=0

echo ''
date
echo ''
/etc/rc.banner
echo ''
exit 0
