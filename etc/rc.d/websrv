#!/bin/sh
#
# Part of XigmaNAS (https://www.xigmanas.com).
# Copyright (c) 2018-2019 XigmaNAS <info@xigmanas.com>.
# All rights reserved.
#
# websrv script
#

# PROVIDE: websrv
# REQUIRE: websrv_htpasswd DAEMON
# KEYWORD: shutdown
# XQUERY: -i "count(//websrv/enable) > 0" -o "0" -b
# RCVAR: websrv

. /etc/rc.subr
. /etc/configxml.subr
. /etc/util.subr

name="websrv"
desc="websrv setup"
rcvar=websrv_enable

load_rc_config "${name}"

# Custom commands
start_precmd="websrv_mkconf"
stop_postcmd="websrv_poststop"
restart_precmd="websrv_check"
reload_precmd="websrv_prereload"
reload_postcmd="websrv_postreload"
mkconf_cmd="websrv_mkconf"
check_cmd="websrv_check"
extra_commands="reload check mkconf"

# Defaults
websrv_enable=${websrv_enable:-"NO"}
websrv_conf=${websrv_conf:-"/var/etc/websrv.conf"}
websrv_uploaddir_conf=${websrv_uploaddir_conf:-"/var/etc/websrv-uploaddir.conf"}
websrv_certpem=${websrv_certpem:-"/var/etc/websrvcert.pem"}
websrv_server_maxwriteidle=${websrv_server_maxwriteidle:-"360"}
ARCH=`uname -p`
if [ "$ARCH" = "amd64" ]; then
	websrv_maxrequestsize=${websrv_maxrequestsize:-"16777216"}
else
	websrv_maxrequestsize=${websrv_maxrequestsize:-"2097152"}
fi
pidfile="/var/run/websrv.pid"
command=/usr/local/sbin/lighttpd
command_args="-f ${websrv_conf} -m /usr/local/lib/lighttpd"
sig_reload="-INT"

websrv_mkconf()
{
	local _protocol _certificate _privatekey _documentroot _uploaddir
	local _runasuser _runasgroup

	# Get configuration data
	_protocol=`configxml_get "//websrv/protocol"`
	_certificate=`configxml_get "//websrv/certificate"`
	_privatekey=`configxml_get "//websrv/privatekey"`
	_documentroot=`configxml_get "//websrv/documentroot"`
	_uploaddir=`configxml_get "//websrv/uploaddir"`
	_runasuser=`configxml_get "//websrv/runasuser"`
	_runasgroup=""
	if [ -n "$_runasuser" ]; then
		_runasgroup="server.groupname = \"www\""
	fi
	if [ -z "$_uploaddir" ]; then
		_uploaddir="/var/tmp/ftmp"
	fi

	# Create .conf file
	# mod_webdav before mod_auth
	echo "# created by websrv" > ${websrv_conf}
	/usr/local/bin/xml sel --template \
		--match "//websrv" \
			--value-of "concat('server.port = ',port)" --nl \
			--output "${_runasuser}" --nl \
			--output "${_runasgroup}" --nl \
			--value-of "concat('server.document-root = \"',documentroot,'\"')" --nl \
			--if "count(dirlisting) > 0" \
				--output 'server.dir-listing = "enable"' --nl \
				--output 'dir-listing.activate = "enable"' --nl \
				--output 'dir-listing.hide-dotfiles = "enable"' --nl \
				--output 'dir-listing.encoding = "utf-8"' --nl \
			--break \
			--output 'server.modules = (' --nl \
			--output '  "mod_access",' --nl \
			--if "count(webdav/param[enable]) > 0" \
				--output '  "mod_webdav",' --nl \
			--break \
			--output '  "mod_auth",' --nl \
			--output '  "mod_expire",' --nl \
			--output '  "mod_cgi",' --nl \
			--output '  "mod_fastcgi",' --nl \
			--output '  "mod_openssl",' --nl \
			--output '  "mod_setenv",' --nl \
			--output '  "mod_rewrite",' --nl \
			--output '  "mod_redirect",' --nl \
			--output '  "mod_alias"' --nl \
			--output ')' --nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc >> ${websrv_conf}
	
	cat <<EOF >> ${websrv_conf}	
server.errorlog-use-syslog = "enable"
# debugmode debug.log-request-handling enable/disable
debug.log-request-handling = "disable"
#server.event-handler = "freebsd-kqueue"
server.event-handler = "libev"
server.max-write-idle = ${websrv_server_maxwriteidle}
index-file.names   = ( "index.php", "index.html", "index.htm", "index.shtml", "default.htm" )
# set trust path
setenv.add-environment = ( "PATH" => "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin" )
#\$HTTP["url"] =~ "\.(js|css|png|gif|jpg)$" {
#    expire.url = ( "" => "access plus 1 hours" )
#}
# mimetype mapping
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".svg"          =>      "image/svg+xml",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".spec"         =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mp4"          =>      "video/mp4",
  ".mpg4"         =>      "video/mp4",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  ".rpm"          =>      "application/x-rpm",
  # make the default mime type application/octet-stream.
  ""              =>      "application/octet-stream",
 )
url.access-deny = ( "~", ".inc", ".websrv_htpasswd" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )
server.pid-file = "${pidfile}"
# cgi.assign = (".php" => "/usr/local/bin/php-cgi-websrv")
server.tag = "webserv"

# FastCGI
fastcgi.server = ( ".php" =>
  (( "socket" => "/var/tmp/php-wsrv.socket",
        "bin-path" => "/usr/local/bin/php-cgi",
        "bin-environment" => (
            "PHP_FCGI_CHILDREN" => "5",
            "PHP_FCGI_MAX_REQUESTS" => "1000"
        ),
        "bin-copy-environment" => (
            "PATH", "SHELL", "USER" ),
        "broken-scriptfilename" => "enable",
        "min-procs" => 1,
        "max-procs" => 2,
        "max-load-per-proc" => 90,
        "idle-timeout" => 360,
        "x-sendfile" => "enable"
    )
  )
)
EOF

	# Set temporary directory
	echo "${_uploaddir}" > ${websrv_uploaddir_conf}
	cat <<EOF >> ${websrv_conf}
server.upload-dirs = ( "${_uploaddir}" )
server.max-request-size = ${websrv_maxrequestsize}
EOF
	
	# Add auxparam
	/usr/local/bin/xml sel -t -m "//websrv" \
		-m "auxparam" \
			-v "." -n \
		-b \
		${configxml_file} | /usr/local/bin/xml unesc >> ${websrv_conf}

	# Configure authentication.
	if configxml_isset //websrv/authentication/enable; then
		local _htpasswd="${_documentroot}/.websrv_htpasswd"

		# Add authentication configuration.
		cat <<EOF >> ${websrv_conf}
auth.backend = "htpasswd"
auth.backend.htpasswd.userfile = "${_htpasswd}"
EOF

		/usr/local/bin/xml sel --template \
			--match '//websrv/authentication' \
				--output 'auth.require = ( ' \
				--match 'url' \
					--value-of "concat('\"',path,'\" =>')" --nl \
					--output "(" --nl \
					--output '"method" => "basic",' --nl \
					--value-of "concat('\"realm\" => \"',realm,'\",')" --nl \
					--output '"require" => "valid-user"' --nl \
					--output '),' --nl \
				--break \
				--output ')' -n \
			--break \
			${configxml_file} | /usr/local/bin/xml unesc >> ${websrv_conf}
	fi
	#	WebDAV
	# --value-of "concat('\$HTTP[\"url\"] =~ \"^/',folderpattern,'(\$|/)\" {')" --nl \
	/usr/local/bin/xml sel --template \
		--match '//websrv/webdav/param[enable]' \
			--if 'string-length(folderpattern) > 0' \
				--output '$HTTP["url"] =~ "^/' --value-of 'folderpattern' --output '($|/)" {' --nl \
				--output 'webdav.activate = "enable"' --nl \
				--if 'count(isreadonly) > 0' \
					--output 'webdav.is-readonly = "enable"' --nl \
				--else \
					--output 'webdav.is-readonly = "disable"' --nl \
				--break \
				--if 'count(usesqlite) > 0' \
					--if 'string-length(uuid) > 0' \
						--output 'webdav.sqlite-db-name = "/tmp/websrv.webdav_lock.' \
						--value-of 'uuid' \
						--output '.db"' --nl \
					--break \
				--break \
				--match 'auxparam' \
					--if 'position() < last() or string-length(.) > 0' \
						--value-of '.' --nl \
					--break \
				--break \
				--output '}' --nl \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc >> ${websrv_conf}
	if [ "${_protocol}" = "https" ]; then
		cat <<EOF >> ${websrv_conf}
ssl.engine = "enable"
ssl.pemfile = "${websrv_certpem}"
ssl.use-sslv3 = "disable"
EOF

		# Create .pem file (required)
		if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
			_tmpfile=/tmp/websrv$$.tmp

			echo "${_certificate}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${websrv_certpem}
			echo "" >> ${websrv_certpem}
			echo "${_privatekey}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} >> ${websrv_certpem}
			/bin/chmod 0600 ${websrv_certpem}

			/bin/rm -f ${_tmpfile}
		fi
	fi
}

websrv_check()
{
	echo "Performing sanity check on ${name} configuration:"
	eval "${command} ${command_args} -tt"
}

websrv_poststop()
{
	rm -f ${pidfile}
}

websrv_prereload()
{
	echo "Stopping ${name} and starting gracefully."
}

websrv_postreload()
{
	rm -f ${pidfile}
	run_rc_command start
}

run_rc_command "$1"
