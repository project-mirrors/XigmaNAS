#!/bin/sh
#
# Part of XigmaNAS® (https://www.xigmanas.com).
# Copyright © 2018-2020 XigmaNAS® <info@xigmanas.com>.
# All rights reserved.
#
# Set configuration
#

# PROVIDE: rcconf
# BEFORE: CONFIG
# REQUIRE: SYSTEMINIT

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="rcconf"

setvar()
{
	local _platform

#	Get operating platform
	_platform=`cat /etc/platform`
	case ${_platform} in
		*-full)
			;;
		*)
#			If running from liveCD or embedded use a memory filesystem for /var.
			if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
				eval /usr/local/sbin/rconf attribute set varmfs "NO";
			else
				eval /usr/local/sbin/rconf attribute set varmfs "YES";
			fi
			eval /usr/local/sbin/rconf attribute set varmfs_flags "-U -t -o noatime -m 2";
			eval /usr/local/sbin/rconf attribute set populate_var "YES";
			;;
	esac
}

sethostid()
{
	local _uuid _systemuuid

#	set uuid if not exist in smbios
	_uuid=`/bin/kenv -q smbios.system.uuid`
	_systemuuid=`configxml_get "//system/uuid"`
	if [ -z "${_uuid}" -a -n "${_systemuuid}" ]; then
#		/bin/kenv -q "smbios.system.uuid=${_systemuuid}" > /dev/null
		if [ ! -f /etc/hostid ]; then
			echo "${_systemuuid}" > /etc/hostid
		fi
	fi
}

# Set hostname
sethostname()
{
	local _hostname

#	Generate hostname from configuration.
	_hostname=`/usr/local/bin/xml sel --template \
		--match "//system" \
			--value-of "hostname" \
			--if "string-length(domain) > 0" \
				--value-of "concat('.',domain)" \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`
	eval /usr/local/sbin/rconf attribute set hostname "${_hostname}"
}

# Set interface configuration
setifconfig()
{
	local _value _ifn _create_args _ifconfig_args _ipaddr _subnet _gateway
	local  _cloned_interfaces _id _ifn_isboot _tap _taplist

#	Cleanup ifn and addrs
	set | grep -E '^(ifconfig_|ipv4_|ipv6_)' | while read _value; do
		_value=${_value%=*}
		eval /usr/local/sbin/rconf attribute remove "${_value}"
	done
#########################################################################
#	IPv4
#	LAN interface:
	_ifn=`configxml_get "//interfaces/lan/if"`
	_ifn=`get_if ${_ifn}`
	_ifn_isboot=`sysctl -q -n net.isboot.nic`
#	set create_args for
#	-vlan
#	LAN interface is always enabled
	_create_args=`/usr/local/bin/xml sel --template \
		--match "//interfaces/lan" \
			--if "starts-with(if,'vlan')" \
				--match "//vinterfaces/vlan[if = '${_ifn}']" \
					--value-of "concat('vlan ',tag,' vlandev ',vlandev)" \
				--break \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`
	if [ -n "${_create_args}" ]; then
		eval /usr/local/sbin/rconf attribute set "create_args_${_ifn}" "${_create_args}"
	fi
#	set ifconfig
	_ifconfig_args=`/usr/local/bin/xml sel --template \
		--match "//interfaces/lan" \
			--if "ipaddr[. = 'dhcp']" \
				--output " syncdhcp" \
			--break \
			--if "media[. != 'autoselect'] and count(mediaopt) > 0" \
				--value-of "concat(' media ',media,' mediaopt ',mediaopt)" \
			--break \
			--if "starts-with(if,'lagg') = 0" \
				--if "string-length(wakeon) > 0" \
					--if "wakeon[. = 'off']" \
						--output " -wol" \
					--else \
						--value-of "concat(' -wol ',translate(wakeon, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'))" \
					--break \
				--break \
				--if "string-length(mtu) > 0" \
					--value-of "concat(' mtu ',mtu)" \
				--break \
			--break \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
			--match "wireless" \
				--value-of "concat(' ssid ',ssid,' channel ',channel)" \
				--if "string-length(standard) > 0" \
					--value-of "concat(' mode ',standard)" \
				--break \
				--if "count(wep/enable) > 0" \
					--value-of "concat(' wepmode on wepkey ',wep/key,' weptxkey 1')" \
				--else \
					--output " wepmode off" \
				--break \
				--if "count(wpa/enable) > 0" \
					--output " WPA" \
				--break \
			--break \
			--if "starts-with(if,'lagg')" \
				--match "//vinterfaces/lagg[if = '${_ifn}']" \
					--value-of "concat(' laggproto ',laggproto)" \
					--match "laggport" \
						--value-of "concat(' laggport ',.)" \
					--break \
				--break \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`
	_ifconfig_args="${_ifconfig_args#"${_ifconfig_args%%[![:space:]]*}"}"
	_ipaddr=`configxml_get "//interfaces/lan/ipaddr"`
	_subnet=`configxml_get "//interfaces/lan/subnet"`
	if [ "${_ifn}" = "${_ifn_isboot}" ]; then
#		don't set default for iSCSI booted NIC
	else
#		"ifconfig hostname" is valid syntax, so it should not set a string.
#		A string causes name resolution.
		if [ -n "${_ipaddr}" -a -n "${_subnet}" ]; then
			is_validip inet "${_ipaddr}/${_subnet}"
			if [ 0 -eq $? ]; then
				_ifconfig_args="inet ${_ipaddr}/${_subnet} ${_ifconfig_args}"
				eval /usr/local/sbin/rconf attribute set firewall_client_net "${_ipaddr}/${_subnet}"
			fi
		fi
		if [ -n "${_ifconfig_args}" ]; then
			eval /usr/local/sbin/rconf attribute set "ifconfig_${_ifn}" "${_ifconfig_args}"
		fi
	fi
#	Set gateway.
	_gateway=`configxml_get "//interfaces/lan/gateway"`
	if [ "${_ipaddr}" != "dhcp" -a -n "${_gateway}" ]; then
		eval /usr/local/sbin/rconf attribute set "defaultrouter" "${_gateway}"
#		wait response of LAN
#		eval /usr/local/sbin/rconf attribute set netwait_enable "YES"
		eval /usr/local/sbin/rconf attribute set netwait_ip "${_gateway}"
		eval /usr/local/sbin/rconf attribute set netwait_if "${_ifn}"
	fi
#	OPT interfaces:
	_id=`configxml_get_count "//interfaces/*[contains(name(),'opt')]"`
	while [ ${_id} -gt 0 ]; do
		_ifn=`configxml_get "//interfaces/*[name() = 'opt${_id}']/if"`
		if configxml_isset "//interfaces/*[name() = 'opt${_id}']/enable"; then
#			set create_args for
#			- vlan
#			when OPT interface is enabled
			_create_args=`/usr/local/bin/xml sel --template \
				--match "//interfaces/*[name() = 'opt${_id}']" \
					--if "starts-with(if,'vlan')" \
						--match "//vinterfaces/vlan[if = '${_ifn}']" \
							--value-of "concat('vlan ',tag,' vlandev ',vlandev)" \
						--break \
					--break \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			if [ -n "${_create_args}" ]; then
				eval /usr/local/sbin/rconf attribute set "create_args_${_ifn}" "${_create_args}"
			fi
#			set ifconfig when interface is enabled
			_ifconfig_args=`/usr/local/bin/xml sel --template \
				--match "//interfaces/*[name() = 'opt${_id}']" \
					--if "ipaddr[. = 'dhcp']" \
						--output " syncdhcp" \
					--break \
					--if "media[. != 'autoselect'] and count(mediaopt) > 0" \
						--value-of "concat(' media ',media,' mediaopt ',mediaopt)" \
					--break \
					--if "starts-with(if,'lagg') = 0" \
						--if "string-length(wakeon) > 0" \
							--if "wakeon[. = 'off']" \
								--output ' -wol' \
							--else \
								--value-of "concat(' -wol ',translate(wakeon,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'))" \
							--break \
						--break \
						--if "string-length(mtu) > 0" \
							--value-of "concat(' mtu ',mtu)" \
						--break \
					--break \
					--if "string-length(extraoptions) > 0" \
						--value-of "concat(' ',extraoptions)" \
					--break \
					--match "wireless" \
						--value-of "concat(' ssid ',ssid,' channel ',channel)" \
						--if "string-length(standard) > 0" \
							--value-of "concat(' mode ',standard)" \
						--break \
						--if "count(wep/enable) > 0" \
							--value-of "concat(' wepmode on wepkey ',wep/key,' weptxkey 1')" \
						--else \
							--output " wepmode off" \
						--break \
						--if "count(wpa/enable) > 0" \
							--output " WPA" \
						--break \
					--break \
					--if "starts-with(if,'lagg')" \
						--match "//vinterfaces/lagg[if = '${_ifn}']" \
							--value-of "concat(' laggproto ',laggproto)" \
							--match "laggport" \
								--value-of "concat(' laggport ',.)" \
							--break \
						--break \
					--break \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			_ifconfig_args="${_ifconfig_args#"${_ifconfig_args%%[![:space:]]*}"}"
			_ipaddr=`configxml_get "//interfaces/*[name() = 'opt${_id}']/ipaddr"`
			_subnet=`configxml_get "//interfaces/*[name() = 'opt${_id}']/subnet"`
#			"ifconfig hostname" is valid syntax, so it should not set a string.
#			A string causes name resolution.
			if [ -n "${_ipaddr}" -a -n "${_subnet}" ]; then
				is_validip inet "${_ipaddr}/${_subnet}"
				if [ 0 -eq $? ]; then
					_ifconfig_args="inet ${_ipaddr}/${_subnet} ${_ifconfig_args}"
				fi
			fi
			if [ -n "${_ifconfig_args}" ]; then
				eval /usr/local/sbin/rconf attribute set "ifconfig_${_ifn}" "${_ifconfig_args}"
			fi
		else
#			OPTn is disabled
			eval /usr/local/sbin/rconf attribute remove "ifconfig_${_ifn}"
			eval /usr/local/sbin/rconf attribute remove "create_args_${_ifn}"
		fi
		_id=$(( ${_id} - 1 ))
	done
#	Cloned interfaces:
	_cloned_interfaces=`/usr/local/bin/xml sel --template \
		--if "//interfaces/*/if[contains(.,'lagg')]" \
			--match "//vinterfaces/lagg/if" \
				--value-of "concat(.,' ')" \
			--break \
		--break \
		--match "//vinterfaces/vlan/if" \
			--value-of "concat(.,' ')" \
		--break \
		--match "//vinterfaces/bridge/if" \
			--value-of "concat(.,' ')" \
		--break \
		--match "//vinterfaces/bridge/taplist" \
			--value-of "concat(.,' ')" \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`
	eval /usr/local/sbin/rconf attribute set "cloned_interfaces" "${_cloned_interfaces}"
#	Prepare interfaces used by lagg. Bring interfaces up only if a lagg interface
#	is used as LAN or OPT interface.
	/usr/local/bin/xml sel --template \
		--if "//interfaces/*/if[contains(.,'lagg')]" \
			--match "//vinterfaces/lagg/laggport" \
				--value-of "concat(., ' ', //interfaces/*[if=current()/../if]/mtu)" \
				--nl \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _laggport _laggport_mtu; do
			_laggport_args="up"
			[ -n "${_laggport_mtu}" ] && _laggport_args="${_laggport_args} mtu ${_laggport_mtu}"
			[ -n "${_laggport}" ] && eval /usr/local/sbin/rconf attribute set "ifconfig_${_laggport}" "${_laggport_args}"
		done
#	wlan interfaces
	/usr/local/bin/xml sel --template \
		--match "//vinterfaces/wlan" \
			--value-of "if" \
			--value-of "concat(' ',wlandev)" \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _wlan _wlandev _wlan_args; do
			[ -n "${_wlan}" ] && eval /usr/local/sbin/rconf attribute set "wlans_${_wlandev}" "${_wlan}"
			_wdev=`echo $_wlandev | sed -e 's/[0-9]*$//'`
#			if [ -f "/cf/boot/kernel/if_${_wdev}.ko" ]; then
#				/sbin/kldload "/cf/boot/kernel/if_${_wdev}.ko" > /dev/null 2>&1
#			fi
			/sbin/kldload "if_${_wdev}.ko" > /dev/null 2>&1
		done
	/usr/local/bin/xml sel --template \
		--match "//vinterfaces/wlan[apmode]" \
			--value-of "if" \
			--value-of "concat(' ssid ',ap_ssid)" \
			--value-of "concat(' channel ',ap_channel)" \
			--value-of "concat(' ',ap_extraoptions)" \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _wlan _ap_args; do
			_ap_create_args="wlanmode hostap"
			[ -n "$_wlan" ] && eval /usr/local/sbin/rconf attribute set "create_args_${_wlan}" "${_ap_create_args}"
			[ -n "$_wlan" ] && eval /usr/local/sbin/rconf attribute set "ifconfig_${_wlan}" "${_ap_args}"
		done
#	prepare bridge/carp interfaces
	/usr/local/bin/xml sel --template \
		--match "//vinterfaces/bridge/bridgeif" \
			--value-of "concat(., ' ', ../mtu)" \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _bridgeif _bridgeif_mtu; do
			_bridgeif_args="up"
			[ -n "${_bridgeif_mtu}" ] && _bridgeif_args="${_bridgeif_args} mtu ${_bridgeif_mtu}"
			if [ -n "${_bridgeif}" ]; then
				if configxml_isset "//vinterfaces/wlan[if='${_bridgeif}']/apmode"; then
#					wlanN AP mode in bridge member
					sysctl -q net.link.bridge.inherit_mac=1 > /dev/null
				else
					_value=`/usr/sbin/sysrc -qn ifconfig_${_bridgeif}`
#					if [ "${_value}" != "syncdhcp" -a "${_value}" != "dhcp" ]; then
					if [ -z "${_value}" ]; then
						eval /usr/local/sbin/rconf attribute set "ifconfig_${_bridgeif}" "${_bridgeif_args}"
					fi
				fi
			fi
		done
	/usr/local/bin/xml sel --template \
		--match "//vinterfaces/bridge" \
			--value-of "if" \
			--value-of "concat(' \"', mtu,'\"')" \
			--match "bridgeif" \
				--value-of "concat(' addm ',.)" \
			--break \
			--value-of "concat(' \"', extraoptions,'\"')" \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _bridge _mtu _bridge_args; do
			if [ "${_mtu}" = '""' ]; then _mtu='"1500"'; fi
			_mtu=`echo ${_mtu} | sed -e 's/^"\(.*\)"$/\1/'`
			_bridge_args="up mtu ${_mtu} ${_bridge_args}"
			_bridge_addr=`/usr/local/bin/xml sel --template \
				--match "//interfaces/*[if = '${_bridge}']" \
					--if "ipaddr[. = 'dhcp']" \
						--output "syncdhcp" \
					--else \
						--value-of "concat(ipaddr,'/',subnet)" \
					--break \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			_taplist=`/usr/local/bin/xml sel --template \
				--match "//vinterfaces/bridge[if = '${_bridge}']" \
					--value-of "taplist" \
					--nl \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			for _tap in $_taplist; do
				_bridge_args="${_bridge_args} addm ${_tap}"
			done
			if [ "${_bridge_addr}" = "syncdhcp" ]; then
				_bridge_args="${_bridge_args} ${_bridge_addr}"
			else
				[ -n "${_bridge_addr}" ] && eval /usr/local/sbin/rconf attribute set "ipv4_addrs_${_bridge}" "${_bridge_addr}"
			fi
			[ -n "${_bridge}" ] && eval /usr/local/sbin/rconf attribute set "ifconfig_${_bridge}" "${_bridge_args}"
		done
	/usr/local/bin/xml sel --template \
		--match "//vinterfaces/carp" \
			--value-of "if" \
			--value-of "concat(' vhid ',vhid,' advskew ',advskew,' pass ',password)" \
			--value-of "concat(' alias ',vipaddr,'/',vsubnet)" \
			--value-of "concat(' \"', extraoptions,'\"')" \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _carp _carp_t1 _carp_vhid _carp_t3 _carp_advskew _carp_args; do
			if [ -n "${_carp_advskew}" -a ${_carp_advskew} -le 1 ]; then
#				boot master node with 240(backup)
				_carp_advskew=240
			fi
			_carp_args="$_carp_t1 $_carp_vhid $_carp_t3 $_carp_advskew $_carp_args"
			_carp_linkup=`/usr/local/bin/xml sel --template \
				--match "//vinterfaces/*[if = '${_carp}']" \
					--value-of "linkup" \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			_carp_linkdown=`/usr/local/bin/xml sel --template \
				--match "//vinterfaces/*[if = '${_carp}']" \
					--value-of "linkdown" \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			[ -n "${_carp}" ] && eval /usr/local/sbin/rconf attribute set "ifconfig_${_carp}_alias${_carp_vhid}" "${_carp_args}"
			[ -n "${_carp}" ] && kldload -n carp.ko
			[ -n "${_carp}" ] && cat <<EOF > "/etc/devd/carp_${_carp_vhid}@${_carp}.conf"
notify 30 {
	match "system" "CARP";
	match "subsystem" "${_carp_vhid}@${_carp}";
	match "type" "MASTER";
	action "${_carp_linkup}";
};
notify 30 {
	match "system" "CARP";
	match "subsystem" "${_carp_vhid}@${_carp}";
	match "type" "BACKUP";
	action "${_carp_linkdown}";
};
EOF
		done
#########################################################################
#	IPv6
#	Enable/Disable IPv6
	_value="NO"
	if configxml_isset "//interfaces/*[enable]/ipv6_enable"; then
		_value="YES"
	fi
	if configxml_isset "//interfaces/lan/ipv6_enable"; then
		_value="YES"
	fi
#	eval /usr/local/sbin/rconf attribute set "ipv6_enable" "${_value}"
	eval /usr/local/sbin/rconf attribute set "ipv6_activate_all_interfaces" "${_value}"
#	LAN interface:
	_ifn=`configxml_get "//interfaces/lan/if"`
	_ifn=`get_if ${_ifn}`
	if configxml_isset "//interfaces/lan/ipv6_enable"; then
		_ifconfig_args=`/usr/local/bin/xml sel --template \
			--match "//interfaces/lan" \
				--if "count(ipv6addr) > 0" \
					--if "ipv6addr[. = 'auto']" \
						--output "inet6 accept_rtadv no_dad" \
					--else \
						--value-of "concat(ipv6addr,'/',ipv6subnet)" \
					--break \
				--break \
			--break \
			${configxml_file} | /usr/local/bin/xml unesc`
		if [ -n "${_ifconfig_args}" ]; then
			eval /usr/local/sbin/rconf attribute set "ifconfig_${_ifn}_ipv6" "${_ifconfig_args}"
		fi
#		Set gateway.
		_ipaddr=`configxml_get "//interfaces/lan/ipv6addr"`
		_gateway=`configxml_get "//interfaces/lan/ipv6gateway"`
		if [ "${_ipaddr}" != "auto" -a -n "${_gateway}" ]; then
			eval /usr/local/sbin/rconf attribute set "ipv6_defaultrouter" "${_gateway}"
		fi
#		IPv6 Privacy Extensions.
		if configxml_isset "//interfaces/lan/ipv6privacy"; then
			eval /usr/local/sbin/rconf attribute set "ipv6_privacy" "YES"
		else
			eval /usr/local/sbin/rconf attribute remove "ipv6_privacy"
		fi
	fi
#	OPT interfaces:
	_id=`configxml_get_count "//interfaces/*[contains(name(),'opt')]"`
	while [ ${_id} -gt 0 ]; do
		_ifn=`configxml_get "//interfaces/*[name() = 'opt${_id}']/if"`
		if configxml_isset "//interfaces/*[name() = 'opt${_id}']/ipv6_enable"; then
			_ifconfig_args=`/usr/local/bin/xml sel --template \
				--match "//interfaces/*[name() = 'opt${_id}']" \
					--if "count(ipv6addr) > 0" \
						--if "ipv6addr[. = 'auto']" \
							--output "inet6 accept_rtadv no_dad" \
						--else \
							--value-of "concat(ipv6addr,'/',ipv6subnet)" \
						--break \
					--break \
				--break \
				${configxml_file} | /usr/local/bin/xml unesc`
			if [ -n "${_ifconfig_args}" ]; then
				eval /usr/local/sbin/rconf attribute set "ifconfig_${_ifn}_ipv6" "${_ifconfig_args}"
			fi
		else
			eval /usr/local/sbin/rconf attribute remove "ifconfig_${_ifn}_ipv6"
		fi
		_id=$(( ${_id} - 1 ))
	done
}

# Update services
updateservices()
{
	local _platform

	_platform=`cat /etc/platform`
#	Update boot params
	if [ -z "${BOOT_LIVECD}" ]; then BOOT_LIVECD=0; fi
	if [ -f /etc/boot_lowmem ]; then BOOT_LOWMEM=`cat /etc/boot_lowmem`; fi
	if [ -z "${BOOT_LOWMEM}" ]; then BOOT_LOWMEM=0; fi
#	Update rcvar's. Use settings from config.xml
	for _rcscript in /etc/rc.d/*; do
		_rcscriptname=${_rcscript#/etc/rc.d/}
		if [ "${name}.sh" = "${_rcscriptname}" ]; then continue; fi
		if [ "${name}" != "${_rcscriptname}" ]; then
			_xquery=`grep "XQUERY:" ${_rcscript} | sed 's/.*XQUERY: \(.*\)/\1/'`
			if [ -n "${_xquery}" ]; then
				_rcvar=`grep "RCVAR:" ${_rcscript} | sed 's/.*RCVAR: \(.*\)/\1/'`
				if [ -z "${_rcvar}" ]; then
					_rcvar=${_rcscriptname}
				fi
#				Execute query.
				_queryresult=`configxml_exec_query ${_xquery}`
#				Force off when low memory liveCD
				if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
					if [ "${_rcscriptname}" = "mdnsresponder" ]; then
						_queryresult=1;
					fi
				fi
#				Enable/disable service depending on query result
				if [ "0" = "${_queryresult}" ]; then
					eval /usr/local/sbin/rconf service enable ${_rcvar}
					debug "rcconf: ${_rcscriptname} service enabled"
				else
					eval /usr/local/sbin/rconf service disable ${_rcvar}
					debug "rcconf: ${_rcscriptname} service disabled"
				fi
				echo -n "."
			else
#				Force off when low memory liveCD
				if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
					if [ "${_rcscriptname}" = "lighttpd" ]; then
						eval /usr/local/sbin/rconf service disable ${_rcscriptname}
						debug "rcconf: ${_rcscriptname} service disabled"
						echo -n "."
					fi
				fi
			fi
		fi
	done

#	Force on when low memory full
	case ${_platform} in
		*-full)
			if [ ${BOOT_LOWMEM} -ne 0 ]; then
				eval /usr/local/sbin/rconf service enable lighttpd
			fi
			;;
	esac
}

# Set additional options.
setoptions()
{
	local _option _name _value _platform

#	Unset rc.conf variables configured via WebGUI
	/usr/local/bin/xml sel --template \
		--match "//system/rcconf/param[not(enable)]" \
			--value-of "concat(name,'')" \
			--if "position() <= last()" \
				--nl \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _name; do
			eval /usr/local/sbin/rconf attribute remove "${_name}"
		done
#	Set rc.conf variables configured via WebGUI.
	/usr/local/bin/xml sel --template \
		--match "//system/rcconf/param[enable]" \
			--value-of "concat(name,'=',value)" \
			--if "position() <= last()" \
				--nl \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc | \
		while read _option; do
			_name=${_option%%=*}
			_value=${_option#*=}
			eval /usr/local/sbin/rconf attribute set "${_name}" "${_value}"
		done
#	Enable/disable console screensaver. Set default timeout value.
	_value=`configxml_get "//system/sysconsaver/blanktime"`
	eval /usr/local/sbin/rconf attribute set blanktime "${_value}";
	if configxml_isset "//system/sysconsaver/enable"; then
		_value="green"
	else
		_value=""
	fi
	eval /usr/local/sbin/rconf attribute set saver "${_value}";
#	Enable/disable NFSv4
	if configxml_isset "//nfsd/v4enable"; then
		eval /usr/local/sbin/rconf service enable "nfsv4_server"
		eval /usr/local/sbin/rconf service enable "nfsuserd"
	else
		eval /usr/local/sbin/rconf service disable "nfsv4_server"
		eval /usr/local/sbin/rconf service disable "nfsuserd"
	fi
#	Disable ipfw (enabled by /etc/rc.d/ipfw)
	sysctl -q net.inet.ip.fw.enable=0 > /dev/null
	sysctl -q net.inet6.ip6.fw.enable=0 > /dev/null
	_platform=`cat /etc/platform`
	case ${_platform} in
		dom0-*)
			/sbin/kldload -qn if_tap.ko > /dev/null
			sysctl -q vm.max_wired=-1 > /dev/null
			;;
	esac
}

# Serial console
setserialconsole()
{
	local _sio _ttyu _ttyuonoff

	_ttyu="ttyu0"
	_ttyuonoff=`sed -n "/^${_ttyu}/ s/.*on.*/on/p" /etc/ttys`
#	_sio=`configxml_isset "//system/enableserialconsole"`
	_sio=`kenv console | sed -n 's/.*comconsole.*/on/p'`
	_uboot=`kenv console | sed -n 's/.*uboot.*/on/p'`
	_speed=`kenv -q comconsole_speed || echo "9600"`
	if [ "$_sio" = "on" -o "$_uboot" = "on" ]; then
		if [ "$_ttyuonoff" != "on" ]; then
			sed -i.bak -e "/^${_ttyu}/ s/off/on/" /etc/ttys
		fi
		if [ "$_uboot" = "on" ]; then
			sed -i.bak -e "/^${_ttyu}/ s/autologin/al.115200/" /etc/ttys
		fi
	else
		if [ "$_ttyuonoff" = "on" ]; then
			#sed -i.bak -e "/^${_ttyu}/ s/on/off/" /etc/ttys
			sed -i.bak -e "/^${_ttyu}/ s/on /onifconsole /" /etc/ttys
		else
			sed -i.bak -e "/^${_ttyu}/ s/off/onifconsole/" /etc/ttys
		fi
	fi
	if [ "$_speed" != "9600" ]; then
		sed -i.bak -e "/^${_ttyu}/ s/autologin/al.${_speed}/" /etc/ttys
	fi
}

load_rc_config ${name}
echo -n "Updating rc.conf:"
sethostid
updateservices
setvar
sethostname
setifconfig
setoptions
setserialconsole
#	Finally issue a line break
echo
#	Force reloading of rc.conf file
#	_rc_conf_loaded=false
#	load_rc_config ${name}
return 0
