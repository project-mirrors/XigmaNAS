#!/bin/sh
#
# Part of XigmaNAS® (https://www.xigmanas.com).
# Copyright © 2018-2023 XigmaNAS® <info@xigmanas.com>.
# All rights reserved.
#
# Set configuration
#

# PROVIDE: rcconf
# BEFORE: CONFIG
# REQUIRE: SYSTEMINIT

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="rcconf"

KLDLOAD_CMD="/sbin/kldload"
RCONF_CMD="/usr/local/sbin/rconf"
SYSCTL_CMD="/sbin/sysctl"
SYSRC_CMD="/usr/sbin/sysrc"
XML_CMD="/usr/local/bin/xml"

setvar() {
	local _platform

#	Get operating platform
	_platform=$( cat /etc/platform )
	case ${_platform} in
		*-full)
			;;
		*)
#			If running from liveCD or embedded use a memory filesystem for /var.
			if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
				${SYSRC_CMD} -q varmfs="NO" > /dev/null 2>&1
			else
				${SYSRC_CMD} -q varmfs="YES" > /dev/null 2>&1
			fi
			${SYSRC_CMD} -q varmfs_flags="-U -t -o noatime -m 2" > /dev/null 2>&1
			${SYSRC_CMD} -q populate_var="YES" > /dev/null 2>&1
			;;
	esac
}

#	Set hostid
sethostid() {
	local _uuid _systemuuid

#	set uuid if not exist in smbios
	_uuid=$( /bin/kenv -q smbios.system.uuid )
	_systemuuid=$( configxml_get "//system/uuid" )
	if [ -z "${_uuid}" -a -n "${_systemuuid}" ]; then
#		/bin/kenv -q "smbios.system.uuid=${_systemuuid}" > /dev/null
		if [ ! -f /etc/hostid ]; then
			echo "${_systemuuid}" > /etc/hostid
		fi
	fi
}

#	Set hostname
sethostname() {
	local _hostname

#	Generate hostname from configuration.
	_hostname=$( ${XML_CMD} sel --template \
		--match "//system" \
			--value-of "hostname" \
			--if "string-length(domain) > 0" \
				--value-of "concat('.',domain)" \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc )
	${SYSRC_CMD} -q hostname="${_hostname}" > /dev/null 2>&1
}

#	Remove network related records from rc.conf
#	- cloned_interfaces
#	- create_args_*
#	- ifconfig_*
#	- ipv4_*
#	- ipv6_*
#	- vlans_*
#	- wlans_*
unsetnetworkconfiguration() {
	local _value

	set | grep -E '^(cloned_interfaces|create_args_|ifconfig_|ipv4_|ipv6_|vlans_|wlans_)' | while read _value; do
		_value=${_value%=*}
		${SYSRC_CMD} -qx "${_value}" > /dev/null 2>&1
	done
}

#	Create cloned_interfaces record in rc.conf
#	vlan is handled by setvlans
setclonedinterfaces() {
	local _cloned_interfaces

	_cloned_interfaces=$( ${XML_CMD} sel --template \
		--match "//vinterfaces/lagg/if" \
			--value-of "concat(' ',.)" \
		--break \
		--match "//vinterfaces/bridge/if" \
			--value-of "concat(' ',.)" \
		--break \
		--match "//vinterfaces/bridge/taplist" \
			--value-of "concat(' ',.)" \
		--break \
		${configxml_file} | ${XML_CMD} unesc )
	if [ -n "${_cloned_interfaces}" ]; then
		${SYSRC_CMD} -q cloned_interfaces+="${_cloned_interfaces}" > /dev/null 2>&1
	fi
}

#	Create vlans_ and create_args_ records in rc.conf for vlan devices
#	vlanproto must be set at creation time
#	vlanpcp cannot be set at creation time when interface name is not vlan[#].
setvlans() {
	local _vlanif _vlandev _vlantag _vlanproto _vlanpcp _vlanignore

	${XML_CMD} sel --template \
		--match "//vinterfaces/vlan[enable]" \
			--value-of "concat(if,' ',vlandev,' ',tag,' ')" \
			--if "string-length(vlanproto) > 0" \
				--value-of vlanproto \
			--else \
				--output "802.1Q" \
			--break \
			--output " " \
			--if "string-length(vlanpcp) > 0" \
				--value-of vlanpcp \
			--else \
				--output "0" \
			--break \
			--nl \
		--break \
	${configxml_file} | ${XML_CMD} unesc | \
	while read _vlanif _vlandev _vlantag _vlanproto _vlanpcp _vlanignore; do
		${SYSRC_CMD} -q "vlans_${_vlandev}"+="${_vlanif}" > /dev/null 2>&1
		${SYSRC_CMD} -q "create_args_${_vlanif}"="vlan ${_vlantag} vlanproto ${_vlanproto}" > /dev/null 2>&1
		cat <<EOF > "/etc/start_if.${_vlanif}" 2>&1
#!/bin/sh
IFCONFIG_CMD="/sbin/ifconfig"
vlan_if="${_vlanif}"
#	vlan_dev="${_vlandev}"
#	vlan_tag="${_vlantag}"
#	vlan_proto="${_vlanproto}"
vlan_pcp="${_vlanpcp}"
#	replaced by vlans_ + create_args_
#	if expr \$vlan_if : 'vlan[0-9][0-9]*$' >/dev/null 2>&1; then
#		\${IFCONFIG_CMD} \${vlan_if} create vlandev \${vlan_dev} vlan \${vlan_tag} vlanproto \${vlan_proto}
#	else
#		\${IFCONFIG_CMD} vlan create vlandev \${vlan_dev} vlan \${vlan_tag} vlanproto \${vlan_proto} name \${vlan_if}
#	fi
\${IFCONFIG_CMD} \${vlan_if} vlanpcp \${vlan_pcp}
EOF
		chmod ug+x "/etc/start_if.${_vlanif}" 2>&1
	done
}

#	Create wlans_ records in rc.conf for wlan devices
setwlans() {
	local _wlanif _wlandev _wlandrv

	${XML_CMD} sel --template \
		--match "//vinterfaces/wlan" \
			--value-of "concat(if,' ',wlandev)" \
			--nl \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
	while read _wlanif _wlandev; do
		if [ -n "${_wlanif}" ]; then
			${SYSRC_CMD} -q "wlans_${_wlandev}"+=" ${_wlanif}" > /dev/null 2>&1
		fi
		_wlandrv=$( echo $_wlandev | sed -e 's/[0-9]*$//' )
#		if [ -f "/cf/boot/kernel/if_${_wlandrv}.ko" ]; then
#			${KLDLOAD_CMD} "/cf/boot/kernel/if_${_wlandrv}.ko" > /dev/null 2>&1
#		fi
		${KLDLOAD_CMD} "if_${_wlandrv}.ko" > /dev/null 2>&1
	done
}

#	Set interface configuration
setifconfig() {
	local _value _id
	local _ifn _ipaddr _subnet _gateway _mtu _ifn_isboot
	local _ifconfig_args
	local _laggport _laggport_mtu _laggport_args
	local _vlandev _vlandev_args _vlandev_ifconfig
	local _wlan _wlandev _wlan_args _wdev _ap_args _ap_create_args
	local _bridgeif _bridgeif_mtu _bridgeif_args _bridge _bridge_args _bridge_addr _tap _taplist
	local _carp _carp_t1 _carp_vhid _carp_t3 _carp_advskew _carp_args _carp_linkup _carp_linkdown

#	LAN interface
	_ifn=$( configxml_get "//interfaces/lan/if" )
	_ifn=$( get_if ${_ifn} )
	_ifn_isboot=$( ${SYSCTL_CMD} -q -n net.isboot.nic )
#	set ifconfig
	_ifconfig_args=$( ${XML_CMD} sel --template \
		--match "//interfaces/lan" \
			--if "ipaddr[. = 'dhcp']" \
				--output " syncdhcp" \
			--break \
			--if "media[. != 'autoselect'] and count(mediaopt) > 0" \
				--value-of "concat(' media ',media,' mediaopt ',mediaopt)" \
			--break \
			--if "starts-with(if,'lagg') = 0" \
				--if "string-length(wakeon) > 0" \
					--if "wakeon[. = 'off']" \
						--output " -wol" \
					--else \
						--value-of "concat(' -wol ',translate(wakeon,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'))" \
					--break \
				--break \
				--if "string-length(mtu) > 0" \
					--value-of "concat(' mtu ',mtu)" \
				--break \
			--break \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
			--match "wireless" \
				--value-of "concat(' ssid ',ssid,' channel ',channel)" \
				--if "string-length(standard) > 0" \
					--value-of "concat(' mode ',standard)" \
				--break \
				--if "count(wep/enable) > 0" \
					--value-of "concat(' wepmode on wepkey ',wep/key,' weptxkey 1')" \
				--else \
					--output " wepmode off" \
				--break \
				--if "count(wpa/enable) > 0" \
					--output " WPA" \
				--break \
			--break \
			--if "starts-with(if,'lagg')" \
				--match "//vinterfaces/lagg[if = '${_ifn}']" \
					--value-of "concat(' laggproto ',laggproto)" \
					--match "laggport" \
						--value-of "concat(' laggport ',.)" \
					--break \
				--break \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc )
	_ipaddr=$( configxml_get "//interfaces/lan/ipaddr" )
	_subnet=$( configxml_get "//interfaces/lan/subnet" )
	if [ "${_ifn}" = "${_ifn_isboot}" ]; then
#		don't set default for iSCSI booted NIC
	else
#		"ifconfig hostname" is valid syntax, so it should not set a string.
#		A string causes name resolution.
		if [ -n "${_ipaddr}" -a -n "${_subnet}" ]; then
			is_validip inet "${_ipaddr}/${_subnet}"
			if [ 0 -eq $? ]; then
				_ifconfig_args="inet ${_ipaddr}/${_subnet}${_ifconfig_args}"
				${SYSRC_CMD} -q firewall_client_net="${_ipaddr}/${_subnet}" > /dev/null 2>&1
			fi
		fi
		if [ -n "${_ifconfig_args}" ]; then
			${SYSRC_CMD} -q "ifconfig_${_ifn}"+="${_ifconfig_args}" > /dev/null 2>&1
		fi
	fi
#	Set gateway.
	_gateway=$( configxml_get "//interfaces/lan/gateway" )
	if [ "${_ipaddr}" != "dhcp" -a -n "${_gateway}" ]; then
		${SYSRC_CMD} -q defaultrouter="${_gateway}" > /dev/null 2>&1
#		wait response of LAN
#		${SYSRC_CMD} -q netwait_enable="YES" > /dev/null 2>&1
		${SYSRC_CMD} -q netwait_ip="${_gateway}" > /dev/null 2>&1
		${SYSRC_CMD} -q netwait_if="${_ifn}" > /dev/null 2>&1
	fi
#	OPT interfaces
	_id=$( configxml_get_count "//interfaces/*[contains(name(),'opt')]" )
	while [ ${_id} -gt 0 ]; do
		_ifn=$( configxml_get "//interfaces/*[name() = 'opt${_id}']/if" )
#		make and add ifconfig for OPT# when interface is enabled, otherwise delete ifconfig record
		if configxml_isset "//interfaces/*[name() = 'opt${_id}']/enable"; then
#			interface OPT# is enabled
			_ifconfig_args=$( ${XML_CMD} sel --template \
				--match "//interfaces/*[name() = 'opt${_id}']" \
					--if "ipaddr[. = 'dhcp']" \
						--output " syncdhcp" \
					--break \
					--if "media[. != 'autoselect'] and count(mediaopt) > 0" \
						--value-of "concat(' media ',media,' mediaopt ',mediaopt)" \
					--break \
					--if "starts-with(if,'lagg') = 0" \
						--if "string-length(wakeon) > 0" \
							--if "wakeon[. = 'off']" \
								--output ' -wol' \
							--else \
								--value-of "concat(' -wol ',translate(wakeon,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'))" \
							--break \
						--break \
						--if "string-length(mtu) > 0" \
							--value-of "concat(' mtu ',mtu)" \
						--break \
					--break \
					--if "string-length(extraoptions) > 0" \
						--value-of "concat(' ',extraoptions)" \
					--break \
					--match "wireless" \
						--value-of "concat(' ssid ',ssid,' channel ',channel)" \
						--if "string-length(standard) > 0" \
							--value-of "concat(' mode ',standard)" \
						--break \
						--if "count(wep/enable) > 0" \
							--value-of "concat(' wepmode on wepkey ',wep/key,' weptxkey 1')" \
						--else \
							--output " wepmode off" \
						--break \
						--if "count(wpa/enable) > 0" \
							--output " WPA" \
						--break \
					--break \
					--if "starts-with(if,'lagg')" \
						--match "//vinterfaces/lagg[if = '${_ifn}']" \
							--value-of "concat(' laggproto ',laggproto)" \
							--match "laggport" \
								--value-of "concat(' laggport ',.)" \
							--break \
						--break \
					--break \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			_ipaddr=$( configxml_get "//interfaces/*[name() = 'opt${_id}']/ipaddr" )
			_subnet=$( configxml_get "//interfaces/*[name() = 'opt${_id}']/subnet" )
#			"ifconfig hostname" is valid syntax, so it should not set a string. A string causes name resolution.
			if [ -n "${_ipaddr}" -a -n "${_subnet}" ]; then
				is_validip inet "${_ipaddr}/${_subnet}"
				if [ 0 -eq $? ]; then
					_ifconfig_args="inet ${_ipaddr}/${_subnet}${_ifconfig_args}"
				fi
			fi
			if [ -n "${_ifconfig_args}" ]; then
				${SYSRC_CMD} -q "ifconfig_${_ifn}"+="${_ifconfig_args}" > /dev/null 2>&1
			fi
		else
#			interface OPT# is disabled
			${SYSRC_CMD} -qx "ifconfig_${_ifn}" > /dev/null 2>&1
		fi
		_id=$(( ${_id} - 1 ))
	done
#	Prepare interfaces used by lagg. Bring interfaces up only if a lagg interface is used as LAN or OPT interface.
	${XML_CMD} sel --text --template \
		--match '//interfaces/*[((name()="lan") or (starts-with(name(),"opt") and enable)) and starts-with(if,"lagg")]' \
			--var lagginterface='.' \
			--match '//vinterfaces/lagg[if=$lagginterface/if]/laggport' \
				--if 'string-length(.) > 0' \
					--value-of 'concat(.," ",$lagginterface/mtu)' \
					--nl \
				--break \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _laggport _laggport_mtu; do
			_laggport_args="up"
			if [ -n "${_laggport_mtu}" ]; then
				_laggport_args="${_laggport_args} mtu ${_laggport_mtu}"
			fi
			if [ -n "${_laggport}" ]; then
				${SYSRC_CMD} -q "ifconfig_${_laggport}"+="${_laggport_args}" > /dev/null 2>&1
			fi
		done
#	Bring unconfigured parents up when a vlan interface is used as a LAN or OPT interface.
	${XML_CMD} sel --text --template \
		--match '//interfaces/*[((name()="lan") or (starts-with(name(),"opt") and enable))]' \
			--var vlaninterface='.' \
			--match '//vinterfaces/vlan[enable and if=$vlaninterface/if]' \
				--if 'string-length(vlandev) > 0' \
					--value-of vlandev \
					--nl \
				--break \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _vlandev; do
			_vlandev_ifconfig=$( ${SYSRC_CMD} -qn "ifconfig_${_vlandev}" )
#			don't issue up to a vlan parent when ifconfig is already set
			if [ -z "${_vlandev_ifconfig}" ]; then
				_vlandev_args="up"
				${SYSRC_CMD} -q "ifconfig_${_vlandev}"="${_vlandev_args}" > /dev/null 2>&1
			fi
		done
#	wlan interfaces
	${XML_CMD} sel --template \
		--match "//vinterfaces/wlan[apmode]" \
			--value-of "if" \
			--value-of "concat(' ssid ',ap_ssid)" \
			--value-of "concat(' channel ',ap_channel)" \
			--value-of "concat(' ',ap_extraoptions)" \
			--nl \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _wlan _ap_args; do
			_ap_create_args="wlanmode hostap"
			if [ -n "$_wlan" ]; then
				${SYSRC_CMD} -q "create_args_${_wlan}"+="${_ap_create_args}" > /dev/null 2>&1
			fi
			if [ -n "$_wlan" ]; then
				${SYSRC_CMD} -q "ifconfig_${_wlan}"+="${_ap_args}" > /dev/null 2>&1
			fi
		done
#	prepare bridge/carp interfaces
	${XML_CMD} sel --template \
		--match "//vinterfaces/bridge/bridgeif" \
			--value-of "concat(.,' ',../mtu)" \
			--nl \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _bridgeif _bridgeif_mtu; do
			_bridgeif_args="up"
			[ -n "${_bridgeif_mtu}" ] && _bridgeif_args="${_bridgeif_args} mtu ${_bridgeif_mtu}"
			if [ -n "${_bridgeif}" ]; then
				if configxml_isset "//vinterfaces/wlan[if='${_bridgeif}']/apmode"; then
#					wlanN AP mode in bridge member
					${SYSCTL_CMD} -q net.link.bridge.inherit_mac=1 > /dev/null
				else
					_value=$( ${SYSRC_CMD} -qn ifconfig_${_bridgeif} )
#					if [ "${_value}" != "syncdhcp" -a "${_value}" != "dhcp" ]; then
					if [ -z "${_value}" ]; then
						${SYSRC_CMD} -q "ifconfig_${_bridgeif}"+="${_bridgeif_args}" > /dev/null 2>&1
					fi
				fi
			fi
		done
	${XML_CMD} sel --template \
		--match "//vinterfaces/bridge" \
			--value-of "if" \
			--if "string-length(mtu) > 0" \
				--value-of "concat(' mtu ',mtu)" \
			--else \
				--output " mtu 1500" \
			--break \
			--match "bridgeif" \
				--value-of "concat(' addm ',.)" \
			--break \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
			--nl \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _bridge _bridge_args; do
			_bridge_args="up ${_bridge_args}"
			_bridge_addr=$( ${XML_CMD} sel --template \
				--match "//interfaces/*[if = '${_bridge}']" \
					--if "ipaddr[. = 'dhcp']" \
						--output "syncdhcp" \
					--else \
						--value-of "concat(ipaddr,'/',subnet)" \
					--break \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			_taplist=$( ${XML_CMD} sel --template \
				--match "//vinterfaces/bridge[if = '${_bridge}']" \
					--value-of "taplist" \
					--nl \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			for _tap in $_taplist; do
				_bridge_args="${_bridge_args} addm ${_tap}"
			done
			if [ "${_bridge_addr}" = "syncdhcp" ]; then
				_bridge_args="${_bridge_args} ${_bridge_addr}"
			else
				if [ -n "${_bridge_addr}" ]; then
					${SYSRC_CMD} -q "ipv4_addrs_${_bridge}"+="${_bridge_addr}" > /dev/null 2>&1
				fi
			fi
			if [ -n "${_bridge}" ]; then
				${SYSRC_CMD} -q "ifconfig_${_bridge}"+="${_bridge_args}" > /dev/null 2>&1
			fi
		done
	${XML_CMD} sel --template \
		--match "//vinterfaces/carp" \
			--value-of "if" \
			--value-of "concat(' vhid ',vhid,' advskew ',advskew,' pass ',password)" \
			--value-of "concat(' alias ',vipaddr,'/',vsubnet)" \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
			--nl \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _carp _carp_t1 _carp_vhid _carp_t3 _carp_advskew _carp_args; do
			if [ -n "${_carp_advskew}" -a ${_carp_advskew} -le 1 ]; then
#				boot master node with 240(backup)
				_carp_advskew=240
			fi
			_carp_args="$_carp_t1 $_carp_vhid $_carp_t3 $_carp_advskew $_carp_args"
			_carp_linkup=$( ${XML_CMD} sel --template \
				--match "//vinterfaces/*[if = '${_carp}']" \
					--value-of "linkup" \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			_carp_linkdown=$( ${XML_CMD} sel --template \
				--match "//vinterfaces/*[if = '${_carp}']" \
					--value-of "linkdown" \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			if [ -n "${_carp}" ]; then
				${SYSRC_CMD} -q "ifconfig_${_carp}_alias${_carp_vhid}"+="${_carp_args}" > /dev/null 2>&1
			fi
			if [ -n "${_carp}" ]; then
				${KLDLOAD_CMD} -n carp.ko
			fi
			if [ -n "${_carp}" ]; then
				cat <<EOF > "/etc/devd/carp_${_carp_vhid}@${_carp}.conf"
notify 30 {
	match "system" "CARP";
	match "subsystem" "${_carp_vhid}@${_carp}";
	match "type" "MASTER";
	action "${_carp_linkup}";
};
notify 30 {
	match "system" "CARP";
	match "subsystem" "${_carp_vhid}@${_carp}";
	match "type" "BACKUP";
	action "${_carp_linkdown}";
};
EOF
			fi
		done
#########################################################################
#	IPv6
#	Enable/Disable IPv6
	_value="NO"
	if configxml_isset "//interfaces/*[enable]/ipv6_enable"; then
		_value="YES"
	fi
	if configxml_isset "//interfaces/lan/ipv6_enable"; then
		_value="YES"
	fi
#	${SYSRC_CMD} -q ipv6_enable="${_value}"
	${SYSRC_CMD} -q ipv6_activate_all_interfaces="${_value}" > /dev/null 2>&1
#	LAN interface:
	_ifn=$( configxml_get "//interfaces/lan/if" )
	_ifn=$( get_if ${_ifn} )
	if configxml_isset "//interfaces/lan/ipv6_enable"; then
		_ifconfig_args=$( ${XML_CMD} sel --template \
			--match "//interfaces/lan" \
				--if "count(ipv6addr) > 0" \
					--if "ipv6addr[. = 'auto']" \
						--output "inet6 accept_rtadv no_dad" \
					--else \
						--value-of "concat(ipv6addr,'/',ipv6subnet)" \
					--break \
				--break \
			--break \
			${configxml_file} | ${XML_CMD} unesc )
		if [ -n "${_ifconfig_args}" ]; then
			${SYSRC_CMD} -q "ifconfig_${_ifn}_ipv6"+="${_ifconfig_args}" > /dev/null 2>&1
		fi
#		Set gateway.
		_ipaddr=$( configxml_get "//interfaces/lan/ipv6addr" )
		_gateway=$( configxml_get "//interfaces/lan/ipv6gateway" )
		if [ "${_ipaddr}" != "auto" -a -n "${_gateway}" ]; then
			${SYSRC_CMD} -q ipv6_defaultrouter="${_gateway}" > /dev/null 2>&1
		fi
#		IPv6 Privacy Extensions.
		if configxml_isset "//interfaces/lan/ipv6privacy"; then
			${SYSRC_CMD} -q ipv6_privacy="YES" > /dev/null 2>&1
		else
			${SYSRC_CMD} -qx ipv6_privacy > /dev/null 2>&1
		fi
	fi
#	OPT interfaces:
	_id=$( configxml_get_count "//interfaces/*[contains(name(),'opt')]" )
	while [ ${_id} -gt 0 ]; do
		_ifn=$( configxml_get "//interfaces/*[name() = 'opt${_id}']/if" )
		if configxml_isset "//interfaces/*[name() = 'opt${_id}']/ipv6_enable"; then
			_ifconfig_args=$( ${XML_CMD} sel --template \
				--match "//interfaces/*[name() = 'opt${_id}']" \
					--if "count(ipv6addr) > 0" \
						--if "ipv6addr[. = 'auto']" \
							--output "inet6 accept_rtadv no_dad" \
						--else \
							--value-of "concat(ipv6addr,'/',ipv6subnet)" \
						--break \
					--break \
				--break \
				${configxml_file} | ${XML_CMD} unesc )
			if [ -n "${_ifconfig_args}" ]; then
				${SYSRC_CMD} -q "ifconfig_${_ifn}_ipv6"+="${_ifconfig_args}" > /dev/null 2>&1
			fi
		else
			${SYSRC_CMD} -qx "ifconfig_${_ifn}_ipv6" > /dev/null 2>&1
		fi
		_id=$(( ${_id} - 1 ))
	done
}

# Update services
updateservices() {
	local _platform

	_platform=$( cat /etc/platform )
#	Update boot params
	if [ -z "${BOOT_LIVECD}" ]; then BOOT_LIVECD=0; fi
	if [ -f /etc/boot_lowmem ]; then BOOT_LOWMEM=$( cat /etc/boot_lowmem ); fi
	if [ -z "${BOOT_LOWMEM}" ]; then BOOT_LOWMEM=0; fi
#	Update rcvar's. Use settings from config.xml
	for _rcscript in /etc/rc.d/*; do
		_rcscriptname=${_rcscript#/etc/rc.d/}
		if [ "${name}.sh" = "${_rcscriptname}" ]; then continue; fi
		if [ "${name}" != "${_rcscriptname}" ]; then
			_xquery=$( grep "XQUERY:" ${_rcscript} | sed 's/.*XQUERY: \(.*\)/\1/' )
			if [ -n "${_xquery}" ]; then
				_rcvar=$( grep "RCVAR:" ${_rcscript} | sed 's/.*RCVAR: \(.*\)/\1/' )
				if [ -z "${_rcvar}" ]; then
					_rcvar=${_rcscriptname}
				fi
#				Execute query.
				_queryresult=$( configxml_exec_query ${_xquery} )
#				Force off when low memory liveCD
				if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
					if [ "${_rcscriptname}" = "mdnsresponder" ]; then
						_queryresult=1;
					fi
				fi
#				Enable/disable service depending on query result
				if [ "0" = "${_queryresult}" ]; then
					eval ${RCONF_CMD} service enable ${_rcvar}
					debug "rcconf: ${_rcscriptname} service enabled"
				else
					eval ${RCONF_CMD} service disable ${_rcvar}
					debug "rcconf: ${_rcscriptname} service disabled"
				fi
				echo -n "."
			else
#				Force off when low memory liveCD
				if [ ${BOOT_LIVECD} -ne 0 -a ${BOOT_LOWMEM} -ne 0 ]; then
					if [ "${_rcscriptname}" = "lighttpd" ]; then
						eval ${RCONF_CMD} service disable ${_rcscriptname}
						debug "rcconf: ${_rcscriptname} service disabled"
						echo -n "."
					fi
				fi
			fi
		fi
	done
#	Force on when low memory full
	case ${_platform} in
		*-full)
			if [ ${BOOT_LOWMEM} -ne 0 ]; then
				eval ${RCONF_CMD} service enable lighttpd
			fi
			;;
	esac
}

# Set additional options.
setoptions() {
	local _option _name _value _platform

#	Unset rc.conf variables configured via WebGUI
	${XML_CMD} sel --template \
		--match "//system/rcconf/param[not(enable)]" \
			--value-of "concat(name,'')" \
			--if "position() <= last()" \
				--nl \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _name; do
			${SYSRC_CMD} -qx "${_name}" > /dev/null 2>&1
		done
#	Set rc.conf variables configured via WebGUI.
	${XML_CMD} sel --template \
		--match "//system/rcconf/param[enable]" \
			--value-of "concat(name,'=',value)" \
			--if "position() <= last()" \
				--nl \
			--break \
		--break \
		${configxml_file} | ${XML_CMD} unesc | \
		while read _option; do
			_name=${_option%%=*}
			_value=${_option#*=}
			${SYSRC_CMD} -q "${_name}"="${_value}" > /dev/null 2>&1
		done
#	Enable/disable console screensaver. Set default timeout value.
	_value=$( configxml_get "//system/sysconsaver/blanktime" )
	${SYSRC_CMD} -q blanktime="${_value}" > /dev/null 2>&1
	if configxml_isset "//system/sysconsaver/enable"; then
		_value="green"
	else
		_value=""
	fi
	${SYSRC_CMD} -q saver="${_value}" > /dev/null 2>&1
#	Enable/disable NFSv4
	if configxml_isset "//nfsd/enable"; then
		if configxml_isset "//nfsd/v4enable"; then
			eval ${RCONF_CMD} service enable "nfsv4_server"
			eval ${RCONF_CMD} service enable "nfsuserd"
		else
			eval ${RCONF_CMD} service disable "nfsv4_server"
			eval ${RCONF_CMD} service disable "nfsuserd"
		fi
	else
		eval ${RCONF_CMD} service disable "nfsv4_server"
		eval ${RCONF_CMD} service disable "nfsuserd"
	fi
#	Disable ipfw (enabled by /etc/rc.d/ipfw)
	${SYSCTL_CMD} -q net.inet.ip.fw.enable=0 > /dev/null
	${SYSCTL_CMD} -q net.inet6.ip6.fw.enable=0 > /dev/null
	_platform=$( cat /etc/platform )
	case ${_platform} in
		dom0-*)
			${KLDLOAD_CMD} -qn if_tap.ko > /dev/null
			${SYSCTL_CMD} -q vm.max_wired=-1 > /dev/null
			;;
	esac
}

# Serial console
setserialconsole() {
	local _sio _ttyu _ttyuonoff
	local _sio _uboot _speed

	_ttyu="ttyu0"
	_ttyuonoff=$( sed -n "/^${_ttyu}/ s/.*on.*/on/p" /etc/ttys )
#	_sio=$( configxml_isset "//system/enableserialconsole" )
	_sio=$( kenv console | sed -n 's/.*comconsole.*/on/p' )
	_uboot=$( kenv console | sed -n 's/.*uboot.*/on/p' )
	_speed=$( kenv -q comconsole_speed || echo "9600" )
	if [ "$_sio" = "on" -o "$_uboot" = "on" ]; then
		if [ "$_ttyuonoff" != "on" ]; then
			sed -i.bak -e "/^${_ttyu}/ s/off/on/" /etc/ttys
		fi
		if [ "$_uboot" = "on" ]; then
			sed -i.bak -e "/^${_ttyu}/ s/autologin/al.115200/" /etc/ttys
		fi
	else
		if [ "$_ttyuonoff" = "on" ]; then
			#sed -i.bak -e "/^${_ttyu}/ s/on/off/" /etc/ttys
			sed -i.bak -e "/^${_ttyu}/ s/on /onifconsole /" /etc/ttys
		else
			sed -i.bak -e "/^${_ttyu}/ s/off/onifconsole/" /etc/ttys
		fi
	fi
	if [ "$_speed" != "9600" ]; then
		sed -i.bak -e "/^${_ttyu}/ s/autologin/al.${_speed}/" /etc/ttys
	fi
}

load_rc_config ${name}
echo -n "Updating rc.conf:"
sethostid
updateservices
setvar
sethostname
unsetnetworkconfiguration
setvlans
setclonedinterfaces
setwlans
setifconfig
setoptions
setserialconsole
#	Finally issue a line break
echo
#	Force reloading of rc.conf file
#	_rc_conf_loaded=false
#	load_rc_config ${name}
return 0
