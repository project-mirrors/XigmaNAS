#!/bin/sh
#
# Part of XigmaNAS® (https://www.xigmanas.com).
# Copyright © 2018-2025 XigmaNAS® <info@xigmanas.com>.
# All rights reserved.
#
# Firewall, traffic shaper, packet scheduler, in-kernel NAT
#
# XigmaNAS® Checked: /stable/12/libexec/rc/rc.d/ipfw		Revision 368852
# XigmaNAS® Changes:	- Modify prereqs
# 			- Add status command
# 			- Add mkconf command to create firewall rules file
#

# PROVIDE: ipfw
# REQUIRE: netif
# BEFORE: NETWORKING
# KEYWORD: nojailvnet
# XQUERY: --if "count(//system/firewall/enable) > 0" --output "0" --break
# RCVAR: firewall

. /etc/rc.subr
. /etc/network.subr
. /etc/configxml.subr

name="ipfw"
desc="Firewall, traffic shaper, packet scheduler, in-kernel NAT"
rcvar="firewall_enable"

load_rc_config "$name"

# Custom commands
start_cmd="ipfw_start"
start_precmd="ipfw_prestart"
stop_cmd="ipfw_stop"
status_cmd="ipfw_status"
mkconf_cmd="ipfw_mkconf"
extra_commands="status mkconf"
required_modules="ipfw"

# Defaults
firewall_script_auxrules=${firewall_script_auxrules:-"/etc/rc.firewall.auxrules"}
firewall_verbose_limit=${firewall_verbose_limit:-"5"}

ipfw_status()
{
	if ${SYSCTL} net.inet.ip.fw.enable > /dev/null 2>&1; then
		echo "${name} is running."
	else
		echo "${name} is not running."
		return 1
	fi
}

ipfw_mkconf()
{
	# Clean the rules file
	cat /dev/null > ${firewall_script_auxrules}

	# Add rules
	/usr/local/bin/xml sel --text --template \
		--match "//system/firewall/rule[enable]" -s A:N:- "ruleno" \
			--value-of "concat('\${fwcmd} add ',ruleno)" \
			--if "string-length(setno) > 0" \
				--value-of "concat(' set ',setno)" \
			--else \
				--output ' set 1' \
			--break \
			--value-of "concat(' ',action)" \
			--if "count(log) > 0" \
				--output ' log' \
			--break \
			--value-of "concat(' ',protocol,' from ')" \
			--if "string-length(src) > 0" \
				--value-of "src" \
			--else \
				--output 'any' \
			--break \
			--if "string-length(srcport) > 0" \
				--value-of "concat(' ',srcport)" \
			--break \
			--output ' to ' \
			--if "string-length(dst) > 0" \
				--value-of "dst" \
			--else \
				--output "any" \
			--break \
			--if "string-length(dstport) > 0" \
				--value-of "concat(' ',dstport)" \
			--break \
			--if "string-length(direction) > 0" \
				--value-of "concat(' ',direction)" \
			--break \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
			--if "string-length(if) > 0" \
				--value-of "concat(' via ',if)" \
			--break \
			--nl \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc > ${firewall_script_auxrules}

		# Set verbose logging limit
		${SYSCTL_W} -q net.inet.ip.fw.verbose_limit=${firewall_verbose_limit}
}

ipfw_prestart()
{
	ipfw_mkconf

	if checkyesno dummynet_enable; then
		required_modules="$required_modules dummynet"
	fi
	if checkyesno natd_enable; then
		required_modules="$required_modules ipdivert"
	fi
	if checkyesno firewall_nat_enable; then
		required_modules="$required_modules ipfw_nat"
	fi
}

ipfw_start()
{
	local   _firewall_type

	_firewall_type=$1

	# set the firewall rules script if none was specified
	[ -z "${firewall_script}" ] && firewall_script=/etc/rc.firewall

	if [ -r "${firewall_script}" ]; then
		if [ -f /etc/rc.d/natd ] ; then
			/etc/rc.d/natd start
		fi
		/bin/sh "${firewall_script}" "${_firewall_type}"
		echo 'Firewall rules loaded.'
	elif [ "`ipfw list 65535`" = "65535 deny ip from any to any" ]; then
		echo 'Warning: kernel has firewall functionality, but' \
		    ' firewall rules are not enabled.'
		echo '           All ip services are disabled.'
	fi

	# Firewall logging
	#
	if checkyesno firewall_logging; then
		echo 'Firewall logging enabled.'
		${SYSCTL} net.inet.ip.fw.verbose=1 >/dev/null
	fi

	# Enable the firewall
	#
	${SYSCTL_W} net.inet.ip.fw.enable=1 >/dev/null
}

ipfw_stop()
{
	# Disable the firewall
	#
	${SYSCTL} net.inet.ip.fw.enable=0 >/dev/null
	if [ -f /etc/rc.d/natd ] ; then
		/etc/rc.d/natd stop
	fi
}

load_rc_config $name
run_rc_command $*
