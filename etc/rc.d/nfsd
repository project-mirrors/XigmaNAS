#!/bin/sh
#
# Part of XigmaNAS® (https://www.xigmanas.com).
# Copyright © 2018-2023 XigmaNAS® <info@xigmanas.com>.
# All rights reserved.
#
# Remote NFS server
#
# XigmaNAS® Checked: libexec/rc/rc.d/nfsd		commit/2cd26a286a9e6339a3c6782a7101cbbd5d166666
# XigmaNAS® Changes: modified for XigmaNAS®, removed REQUIRE: gssd
#

# PROVIDE: nfsd
# REQUIRE: mountcritremote mountd hostname nfsuserd
# KEYWORD: nojail shutdown
# XQUERY: -i "count(//nfsd/enable) > 0" -o "0" -b
# RCVAR: nfs_server

. /etc/rc.subr
. /etc/configxml.subr
. /etc/util.subr

name="nfsd"
desc="Remote NFS server"
rcvar=nfs_server_enable
command="/usr/sbin/${name}"
nfs_server_vhost=""

# Customize number of server processes/daemons
nfs_server_flags=`/usr/local/bin/xml sel -t -v "concat('-u -t -n ',//nfsd/numproc)" ${configxml_file} | /usr/local/bin/xml unesc`

load_rc_config $name
nfs_server_maxio=${nfs_server_maxio:-"131072"}

start_precmd="nfsd_precmd"
start_cmd="nfsd_cmd"
sig_stop="USR1"

nfsd_precmd()
{
	local	_vhost
	rc_flags="${nfs_server_flags}"

	# Load the modules now, so that the vfs.nfsd sysctl
	# oids are available.
	load_kld nfsd || return 1

	if [ -n "${nfs_server_maxio}" ]; then
		if ! sysctl vfs.nfsd.srvmaxio=${nfs_server_maxio} >/dev/null; then
			warn "Failed to set server max I/O"
		fi
	fi

	if checkyesno nfs_reserved_port_only; then
		echo 'NFS on reserved port only=YES'
		sysctl vfs.nfsd.nfs_privport=1 > /dev/null
	else
		sysctl vfs.nfsd.nfs_privport=0 > /dev/null
	fi

	if checkyesno nfsv4_server_enable; then
		sysctl vfs.nfsd.server_max_nfsvers=4 > /dev/null
		if ! checkyesno nfsuserd_enable  && \
			   ! /etc/rc.d/nfsuserd forcestatus 1>/dev/null 2>&1
		then
			if ! force_depend nfsuserd; then
				err 1 "Cannot run nfsuserd"
			fi
		fi
	else
		echo 'NFSv4 is disabled'
		sysctl vfs.nfsd.server_max_nfsvers=3 > /dev/null
	fi

	if ! checkyesno rpcbind_enable  && \
		! /etc/rc.d/rpcbind forcestatus 1>/dev/null 2>&1
	then
		force_depend rpcbind || return 1
	fi

	if ! checkyesno mountd_enable  && \
		! /etc/rc.d/mountd forcestatus 1>/dev/null 2>&1
	then
		force_depend mountd || return 1
	fi

	if [ -n "${nfs_server_vhost}" ]; then
		command_args="-V \"${nfs_server_vhost}\""
	fi
	return 0
}
nfsd_cmd()
{
	_enable=`configxml_get_count "//hast/enable"`
	_role=`get_hast_role`
	if [ "${rc_arg}" != "status" -a "$_enable" != "0" -a "$_role" != "primary" -a "$_rc_prefix" != "force" ]; then
		return 0;
	fi

	check_startmsgs && echo "Starting ${name}."
	eval "$command $rc_flags $command_args"
}

run_rc_command "$1"
