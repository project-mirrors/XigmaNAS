#!/bin/sh
#
# /etc/rc.firmware
#
# Part of NAS4Free (http://www.nas4free.org).
# Copyright (c) 2012-2017 The NAS4Free Project <info@nas4free.org>.
# All rights reserved.
#

# Script usage: rc.firmware <args> [<file>]
# Where <args> can take the following values:
# - enable: Create a 256MB ram drive in ${FTMP}
# - disable: Erase ram drive
# - upgrade <file> : Do an embedded release (IMG file) upgrade using the file <file>
# - fullupgrade <file> : Do a full release (TGZ file) upgrade using the file <file>
#

SIZE="256M"
PLATFORM=`cat /etc/platform`
XARCH=`/bin/echo ${PLATFORM} | sed -e 's/-.*//'`
ARCH=`/usr/bin/uname -m`
CFDEVICE=`cat /etc/cfdevice`
SKIP=`expr \( 1 \* 1024 \* 1024 \) / \( 32 \* 1024 \)`
FTMP="/var/tmp/ftmp"
ARG="$2"

backup_chflags() {
	TOPROCESS="bin lib libexec sbin usr"
	for files in $TOPROCESS; do
		/usr/sbin/mtree -Pcp /${files} | /usr/bin/gzip -9 > /tmp/chflags.dist.${files}.gz
	done
}

restore_chflags() {
	TOPROCESS="bin lib libexec sbin usr"
	for files in $TOPROCESS; do
		cd / && /usr/bin/zcat /tmp/chflags.dist.${files}.gz | /usr/sbin/mtree -PU -p /${files}
	done
}

remove_chflags() {
	TOPROCESS="bin lib libexec sbin usr"
	for files in $TOPROCESS; do
		/bin/chflags -R noschg /${files}
		/bin/chmod -R u+rw /${files}
	done
}

enable_upgrade() {
	# Redirect I/O to console.
	exec </dev/console >/dev/console 2>/dev/console

	# Use efficient memory file system
	/sbin/mount -t tmpfs -o size=${SIZE},mode=1777 tmpfs ${FTMP} > /dev/null 2>&1
	if [ 0 != $? ]; then # successfully?
		msg="ERROR: Failed to create in-memory file system."
		printf "\n\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi
}

disable_upgrade() {
	# Redirect I/O to console.
	exec </dev/console >/dev/console 2>/dev/console

	# Get the md device.
	mdid=`/sbin/mount -p | /usr/bin/grep ${FTMP} | /usr/bin/awk '{print $1}'`

	# Umount in-memory file system.
	/sbin/umount -f ${FTMP} > /dev/null 2>&1
	if [ 0 != $? ]; then # successfully?
		msg="ERROR: Failed to umount in-memory file system."
		printf "\n\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi
}

embedded_upgrade() {
	# Wait 5 seconds before beginning
	sleep 5

	# Redirect I/O to console.
	exec </dev/console >/dev/console 2>/dev/console

	printf "\n\n\33[37m%s\33[0m\n" "Firmware upgrade in progress. Please wait..."

	# Check if firmware file exists
	if [ ! -r "${ARG}" ]; then
		msg="ERROR: Firmware file does not exist."
		printf "\n\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	# Test firmware file
	/usr/bin/xz -t "${ARG}" 2>&1
	if [ 0 != $? ]; then
		msg="ERROR: Firmware file is corrupted."
		printf "\n\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	# Backup config
	mkdir /tmp/configbak

	# Get current config.xml file checksum info
	CONFSUM=`sha256 /conf/config.xml | cut -d= -f2`

	cp -p /conf/* /tmp/configbak
	if [ -f /cf/boot.config ]; then
		cp -p /cf/boot.config /tmp/configbak
		if [ $? -eq 1 ]; then
			msg="ERROR: Backup configuration failed."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
		fi
	fi
	# Backup loader.conf.local
	if [ -f /cf/boot/loader.conf.local ]; then
		cp -p /cf/boot/loader.conf.local /tmp/configbak
		if [ $? -eq 1 ]; then
			msg="ERROR: Backup configuration failed."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
		fi
	fi

	# Check config.xml file backup integrity
	CONFSUM_BK=`sha256 /tmp/configbak/config.xml | cut -d= -f2`

	if [ ! ${CONFSUM_BK} == ${CONFSUM} ]; then
			msg="ERROR: Backup configuration corrupted."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
	fi

	# Unmount /cf
	/sbin/umount -f /cf
	if [ 0 != $? ]; then # successfully?
		msg="ERROR: Failed to umount '/cf'!"
		printf "\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	# dd image onto card
	result=1
	if [ -r "${ARG}" ]; then
		/usr/bin/xz -cdv "${ARG}" | /bin/dd of=/dev/${CFDEVICE} ibs=32k obs=32k skip=${SKIP} > /dev/null 2>&1
		result=$?
		if [ 0 != ${result} ]; then # successfully?
			msg="ERROR: Failed to install firmware image on '/dev/${CFDEVICE}'!"
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
		else
			# resize boot partition
			/sbin/growfs -y /dev/${CFDEVICE} > /dev/null 2>&1
			if [ 0 != $? ]; then
				msg="ERROR: Failed partition resize!"
				printf "\33[31m%s\33[0m\n" "${msg}"
				/usr/bin/logger "UPGRADE ${msg}"
				exit 1
			fi
		fi
	fi

	# Sync and wait 2 second after dd
	sync; sleep 2

	# Mount /cf read-write
	/sbin/mount -w -o noatime /cf
	if [ 0 != $? ]; then
		# Try force mount /cf read-write instead.
		/sbin/mount -f -w -o noatime /cf
		if [ 0 != $? ]; then
			msg="ERROR: Failed to mount '/cf' in read-write!"
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi
	fi

	# Restore config
	cp -p /tmp/configbak/* /conf
	if [ -f /conf/boot.config ]; then
		mv /conf/boot.config /cf
		if [ $? -eq 1 ]; then
			msg="ERROR: Restore configuration failed."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
		fi
	fi
	# Restore loader.conf.local
	if [ -f /conf/loader.conf.local ]; then
		mv /conf/loader.conf.local /cf/boot
		if [ $? -eq 1 ]; then
			msg="ERROR: Restore configuration failed."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
		fi
	fi
	rm -r /tmp/configbak

	# Remount /cf read-only
	/sbin/umount -f /cf
	/sbin/mount -r /cf
	if [ 0 != $? ]; then
		msg="ERROR: Failed to remount '/cf' in read-only!"
		printf "\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	# Get restored config.xml file checksum info
	CONFSUM_NEW=`sha256 /conf/config.xml | cut -d= -f2`

	# Check restored config.xml file integrity
	if [ -f /conf/config.xml ]; then
		if [ ! ${CONFSUM_NEW} == ${CONFSUM} ]; then
			msg="ERROR: Restored configuration corrupted."
			printf "\33[31m%s\33[0m\n" "${msg}"
			exit 1
		fi
	else
		msg="ERROR: Configuration file not found."
		printf "\33[31m%s\33[0m\n" "${msg}"
		exit 1
	fi

	# Umount tmpfs
	/sbin/umount -f ${FTMP} > /dev/null 2>&1

	# Reboot system if upgrade was successfully.
	if [ 0 -eq ${result} ]; then
		msg="Firmware installed successfully."
		printf "\33[37;41m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE: ${msg}"
		sync; sleep 1

		msg="Rebooting server..."
		printf "\33[37m%s\33[0m\n" "${msg}"
		/usr/bin/logger "${msg}"
		/sbin/shutdown -r now > /dev/null 2>&1
	else
		exit 1
	fi
}

full_upgrade() {
	# Wait 5 seconds before beginning.
	sleep 5

	# Redirect I/O to console.
	exec </dev/console >/dev/console 2>/dev/console

	printf "\n\n\33[37m%s\33[0m\n" "Firmware upgrade in progress. Please wait..."

	# Check if firmware file exists.
	if [ ! -r "${ARG}" ]; then
		msg="ERROR: Firmware file does not exist."
		printf "\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	# Test firmware file
	/usr/bin/xz -t "${ARG}" 2>&1
	if [ 0 != $? ]; then
		msg="ERROR: Firmware file is corrupted."
		printf "\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
		exit 1
	fi

	backup_chflags
	remove_chflags

	# backup config
	/bin/mkdir -p /tmp/configbak
	cp -p /conf/* /tmp/configbak 2>/dev/null
	if [ -f /boot.config ]; then
		cp -p /boot.config /tmp/configbak 2>/dev/null
	fi
	# Backup loader.conf.local
	if [ -f /cf/boot/loader.conf.local ]; then
		cp -p /cf/boot/loader.conf.local /tmp/configbak
	fi

	/usr/bin/tar xzUPf "${ARG}" -C / 2>&1
	result=$?
	if [ 0 != ${result} ]; then # successfully?
		msg="ERROR: Failed to upgrade firmware!"
		printf "\33[31m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE ${msg}"
	else
		msg="Firmware installed successfully."
		printf "\33[37;41m%s\33[0m\n" "${msg}"
		/usr/bin/logger "UPGRADE: ${msg}"
	fi

	# restore config
	cp -p /tmp/configbak/* /conf 2>/dev/null
	if [ -f /conf/boot.config ]; then
		mv /conf/boot.config / 2>/dev/null
	fi
	# Restore loader.conf.local
	if [ -f /conf/loader.conf.local ]; then
		mv /conf/loader.conf.local /cf/boot
	fi
	rm -r /tmp/configbak

	# restore /etc symlinks
	rm /etc/hosts
	ln -s /var/etc/hosts /etc/hosts

	restore_chflags

	# Start upgrade script to remove obsolete files
	/etc/install/upgrade.sh clean /

	# Reboot system if upgrade was successfully.
	if [ 0 -eq ${result} ]; then
		msg="Rebooting server..."
		printf "\33[37m%s\33[0m\n" "${msg}"
		/usr/bin/logger "${msg}"
		/sbin/shutdown -r now > /dev/null 2>&1
	else
		exit 1
	fi
}

case $1 in
	enable) enable_upgrade ;;
	disable) disable_upgrade ;;
	upgrade) embedded_upgrade ;;
	fullupgrade) full_upgrade ;;
esac
exit 0
