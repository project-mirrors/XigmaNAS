#!/usr/local/bin/php-cgi -f
<?php
/*
	rc.initial.install3gpt

	Part of XigmaNAS (https://www.xigmanas.com).
	Copyright (c) 2018-2019 XigmaNAS <info@xigmanas.com>.
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice, this
	   list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright notice,
	   this list of conditions and the following disclaimer in the documentation
	   and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	The views and conclusions contained in the software and documentation are those
	of the authors and should not be interpreted as representing official policies
	of XigmaNAS, either expressed or implied.
*/
require_once 'config.inc';
require_once 'functions.inc';
require_once 'install.inc';
require_once 'util.inc';
require_once 'tui.inc';

//	default size of slice/partition 1 (used for OS)
$part1size = sprintf('%sM',$g_install['part1size_full']);
//	$part1min = sprintf('%sM',$g_install['part1min_embedded']);
$swapsize = sprintf('%sM',$g_install['default_swap']);
$swapsizemin = sprintf('%sM',$g_install['default_swap'] >> 1);

//	default slice/partition layout
$schemelayout =
	[
		'scheme' => 'GPT',
		'entries' => 128
	];
$partlayout = [
	'boot' => [
		'enabled' => true,
		'partition' => 1,
		'fstype' => 'freebsd-boot',
		'volname' => 'gptboot',
		'align' => '32k',
		'size' => '512k',
		'minimum' => '512k',
//		'maximum' => '512k',
//		'allow_edit' => false,
//		'allow_star' => false,
		'friendly_name' => 'BOOT'
	],
	'efi' => [
		'enabled' => false,
		'partition' => 42,
		'fstype' => 'efi',
		'volname' => 'efiboot',
		'align' => '32k',
		'size' => '200m',
		'minimum' => '200m',
//		'maximum' => '200m',
//		'allow_edit' => false,
//		'allow_star' => false,
		'friendly_name' => 'EFI'
	],
	'root' => [
		'enabled' => true,
		'partition' => 2,
		'fstype' => 'freebsd-ufs',
		'volname' => 'gptroot',
		'align' => '1m',
		'size' => $part1size,
		'minimum' => $part1size,
//		'maximum' => '16g',
		'allow_edit' => true,
//		'allow_star' => false,
		'friendly_name' => 'OS'
	],
	'swap' => [
		'enabled' => true,
		'partition' => 3,
		'fstype' => 'freebsd-swap',
		'volname' => 'gptswap',
		'size' => $swapsize,
		'align' => '1m',
		'minimum' => $swapsizemin,
//		'maximum' => '*',
		'allow_edit' => true,
//		'allow_star' => false,
		'friendly_name' => 'SWAP'
	],
	'data' => [
		'enabled' => true,
		'partition' => 4,
		'fstype' => 'freebsd-ufs',
		'volname' => 'data',
		'align' => '1m',
		'size' => '',
		'minimum' => '256m',
//		'maximum' => '*',
		'allow_edit' => true,
		'allow_star' => true,
		'friendly_name' => 'DATA'
	]
];

//	get product information
$productname = get_product_name();

//	display information
$text = <<<EOD

{$productname} 'Full' installer for Hard Drives & Solid State Drives.

- Create GPT partition 1, for bootcode
- Create GPT partition 2, using UFS, customizable size for OS
- Create GPT partition 3, as SWAP, {$swapsize}MB or more
- Create GPT partition 4, using UFS, for DATA

WARNING: There will be some limitations:
1. This will erase ALL partitions and data on the destination disk!

EOD;
$result = tui_display_message_ex("{$productname} Full Installation",$text,74,15);
if(0 != $result):
	exit(0);
endif;

//	detect hardware
$cdlist = get_install_source_drive();
$disklist = get_physical_disks_list();

if(0 == count($cdlist)):
	tui_wait_keypress('Failed to detect any CDROM/USB device.');
	exit(0);
endif;

//	display source media
$amenuitem = [];
foreach($cdlist as $cdromk => $cdromv):
	$amenuitem[] = ['tag' => $cdromk,'item' => $cdromv['desc']];
endforeach;
$result = tui_display_menu('Choose Source','Select CD/DVD/USB drive.',60,10,6,$amenuitem,$cdrom);
if(0 != $result):
	exit(0);
endif;

//	display destination media
$amenuitem = [];
foreach($disklist as $diskk => $diskv):
	if($diskk !== $cdrom):
		$amenuitem[] = ['tag' => $diskk,'item' => "{$diskv['size']} <{$diskv['desc']}>"];
	endif;
endforeach;
$result = tui_display_menu('Choose Destination',sprintf('Select media where %s should be installed.',$productname),60,14,10,$amenuitem,$harddrive);
if(0 != $result):
	exit(0);
endif;

//	check if destination drive is mounted
if(disks_ismounted_ex($harddrive,'mdisk')):
	tui_wait_keypress('The destination drive is already in use!');
	exit(0);
endif;

//	collect destination media information
$destination_media_capacity = 0;
if(array_key_exists($harddrive,$disklist)):
	if(array_key_exists('devicespecialfile',$disklist[$harddrive])):
		$diskinfo = disks_get_diskinfo($disklist[$harddrive]['devicespecialfile']);
		$destination_media_capacity = $diskinfo['mediasize_bytes'] ?? 0;
	endif;
endif;

if(install_mount_cd($cdlist[$cdrom])):
	tui_wait_keypress('There was a problem while mounting the CDROM/USB drive.');
	exit(0);
endif;

if(!tui_partition_layout($harddrive,$partlayout,$schemelayout)):
	install_unmount_cd();
	tui_wait_keypress('There was a problem during initializing the destination disk.');
	exit(0);
endif;

if(install_harddrive_image($harddrive)):
	install_unmount_cd();
	tui_wait_keypress('There was a problem while copying files.');
	exit(0);
endif;

/*
if(add_default_swap("{$harddrive}p3")):
	install_unmount_cd();
	tui_wait_keypress('There was a problem while adding swap.');
	exit(0);
endif;
*/

install_unmount_cd();

//	display final message
$text = <<<EOD

{$productname} has been installed on {$harddrive}p2.

EOD;

$boot_lowmem = trim(@file_get_contents('/etc/boot_lowmem'));
if('1' === $boot_lowmem):
	// The lowmem version uses swap on it. Should not remove!!
	$text .= <<<EOD

You can now reboot the server.

EOD;
else:
	$text .= <<<EOD

You can now safely remove the LiveCD/USB and reboot the server.

EOD;
endif;

$text .= <<<EOD

To use the DATA partition:
- Add the disk {$harddrive} on the 'Disks|Management' page.
- Add the mount point on the 'Disks|Mount Point|Management' page.
  Use the following parameters:
  Disk {$harddrive}, Partition 4, Partition type GPT, Filesystem UFS

EOD;

/*
if(0 < $swapsize):
	$text .= <<<EOD

To use the SWAP partition:
- Enable swap space usage on the 'System|Advanced|Swap' page.
  Use the following parameters:
  Type: Device, Device: /dev/{$harddrive}p3

EOD;
endif;
*/

$text .= <<<EOD

DO NOT format the drive {$harddrive}! The DATA partition has already been
formated as part of the installation!
EOD;

tui_wait_keypress($text);
