--- mpr/mpr_pci.c.orig	2017-08-30 00:55:52.162207000 +0200
+++ mpr/mpr_pci.c	2017-08-30 01:07:04.000000000 +0200
@@ -69,6 +69,7 @@
 static void	mpr_pci_free(struct mpr_softc *);
 static int	mpr_alloc_msix(struct mpr_softc *sc, int msgs);
 static int	mpr_alloc_msi(struct mpr_softc *sc, int msgs);
+static int	mpr_pci_alloc_interrupts(struct mpr_softc *sc);
 
 static device_method_t mpr_methods[] = {
 	DEVMETHOD(device_probe,		mpr_pci_probe),
@@ -124,23 +125,32 @@
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3324_2,
 	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3324_2" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3408,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3408" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3408" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3416,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3416" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3416" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3508,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3508" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3508" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3508_1,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3508_1" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3508_1" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3516,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3516" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3516" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3516_1,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3516_1" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3516_1" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3616,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3616" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3616" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3708,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3708" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3708" },
 	{ MPI2_MFGPAGE_VENDORID_LSI, MPI26_MFGPAGE_DEVID_SAS3716,
-	    0xffff, 0xffff, 0, "Avago Technologies (LSI) SAS3716" },
+	    0xffff, 0xffff, MPR_FLAGS_GEN35_IOC,
+	    "Avago Technologies (LSI) SAS3716" },
 	{ 0, 0, 0, 0, 0, NULL }
 };
 
@@ -191,22 +201,11 @@
 	m = mpr_find_ident(dev);
 	sc->mpr_flags = m->flags;
 
+	mpr_get_tunables(sc);
+
 	/* Twiddle basic PCI config bits for a sanity check */
 	pci_enable_busmaster(dev);
 
-	/* Set flag if this is a Gen3.5 IOC */
-	if ((m->device == MPI26_MFGPAGE_DEVID_SAS3508) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3508_1) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3408) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3516) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3516_1) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3416) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3716) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3616) ||
-	    (m->device == MPI26_MFGPAGE_DEVID_SAS3708)) {
-		sc->mpr_flags |= MPR_FLAGS_GEN35_IOC;
-	}
-
 	for (i = 0; i < PCI_MAXMAPS_0; i++) {
 		sc->mpr_regs_rid = PCIR_BAR(i);
 
@@ -240,28 +239,52 @@
 		return (ENOMEM);
 	}
 
-	if ((error = mpr_attach(sc)) != 0)
+	if (((error = mpr_pci_alloc_interrupts(sc)) != 0) ||
+	    ((error = mpr_attach(sc)) != 0))
 		mpr_pci_free(sc);
 
 	return (error);
 }
 
+/*
+ * Allocate, but don't assign interrupts early.  Doing it before requesting
+ * the IOCFacts message informs the firmware that we want to do MSI-X
+ * multiqueue.  We might not use all of the available messages, but there's
+ * no reason to re-alloc if we don't.
+ */
 int
-mpr_pci_setup_interrupts(struct mpr_softc *sc)
+mpr_pci_alloc_interrupts(struct mpr_softc *sc)
 {
 	device_t dev;
-	int i, error, msgs;
+	int error, msgs;
 
 	dev = sc->mpr_dev;
-	error = ENXIO;
+	error = 0;
+	msgs = 0;
+
 	if ((sc->disable_msix == 0) &&
 	    ((msgs = pci_msix_count(dev)) >= MPR_MSI_COUNT))
 		error = mpr_alloc_msix(sc, MPR_MSI_COUNT);
 	if ((error != 0) && (sc->disable_msi == 0) &&
 	    ((msgs = pci_msi_count(dev)) >= MPR_MSI_COUNT))
 		error = mpr_alloc_msi(sc, MPR_MSI_COUNT);
+	if (error != 0)
+		msgs = 0;
+
+	sc->msi_msgs = msgs;
+	return (error);
+}
+
+int
+mpr_pci_setup_interrupts(struct mpr_softc *sc)
+{
+	device_t dev;
+	int i, error;
+
+	dev = sc->mpr_dev;
+	error = ENXIO;
 
-	if (error != 0) {
+	if (sc->msi_msgs == 0) {
 		sc->mpr_flags |= MPR_FLAGS_INTX;
 		sc->mpr_irq_rid[0] = 0;
 		sc->mpr_irq[0] = bus_alloc_resource_any(dev, SYS_RES_IRQ,
