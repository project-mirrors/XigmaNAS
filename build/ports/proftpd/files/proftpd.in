#!/bin/sh
#
# Part of XigmaNAS (https://www.xigmanas.com).
# Copyright (c) 2018-2019 XigmaNAS <info@xigmanas.com>.
# All rights reserved.
#
# proftpd service
#

# PROVIDE: proftpd
# REQUIRE: DAEMON
# BEFORE: LOGIN
# KEYWORD: shutdown
# XQUERY: --if "count(//ftpd/enable) > 0" --output "0" --break
# RCVAR: proftpd

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="proftpd"
desc="proftpd service"
rcvar=proftpd_enable

load_rc_config "$name"

# Custom commands
extra_commands="mkconf"
mkconf_cmd="proftpd_mkconf"
start_precmd="proftpd_mkconf"

# Defaults
proftpd_enable=${proftpd_enable:-"NO"}
proftpd_flags=${proftpd_flags:-""}
proftpd_config=${proftpd_config:-"/var/etc/${name}.conf"}
proftpd_delaytable=${proftpd_delaytable:-"/var/run/${name}/${name}.delay"}
proftpd_displaylogin=${proftpd_displaylogin:-"/var/run/${name}/${name}.motd"}
proftpd_tlsrsacertfile=${proftpd_tlsrsacertfile:-"/var/etc/ssl/private/${name}.cert"}
proftpd_tlsrsakeyfile=${proftpd_tlsrsakeyfile:-"/var/etc/ssl/private/${name}.key"}
proftpd_tcpaccessfilesallow=${proftpd_tcpaccessfilesallow:-"/etc/hosts.allow"}
proftpd_tcpaccessfilesdeny=${proftpd_tcpaccessfilesdeny:-"/etc/hosts.deny"}
proftpd_umaskfile=${proftpd_umaskfile:-"077"}
proftpd_umaskdirectory=${proftpd_umaskdirectory:-"022"}
proftpd_maxinstances=${proftpd_maxinstances:-"none"}
proftpd_defaulttransfermode=${proftpd_defaulttransfermode:-"ascii"}
proftpd_deferwelcome=${proftpd_deferwelcome:-"off"}
proftpd_anonymousrootdir=${proftpd_anonymousrootdir:-"/mnt"}
proftpd_sysloglevel=${proftpd_sysloglevel:-"notice"}
proftpd_multilinerfc2228=${proftpd_multilinerfc2228:-"off"}
proftpd_timeoutlogin=${proftpd_timeoutlogin:-"300"}
proftpd_timeoutnotransfer=${proftpd_timeoutnotransfer:-"300"}
proftpd_timeoutstalled=${proftpd_timeoutstalled:-"3600"}
proftpd_defaultrootdir=${proftpd_defaultrootdir:-"~"}
proftpd_defaultrootgroupexpr=${proftpd_defaultrootgroupexpr:-"!wheel"}
proftpd_requirevalidshell=${proftpd_requirevalidshell:-"off"}
proftpd_deleteabortedstores=${proftpd_deleteabortedstores:-"off"}
proftpd_tlsverifyclient=${proftpd_tlsverifyclient:-"off"}
proftpd_tlsoptions=${proftpd_tlsoptions:-"NoCertRequest"}
proftpd_tlsprotocol=${proftpd_tlsprotocol:-"TLSv1"}
proftpd_tlsrequired=${proftpd_tlsrequired:-"on"}
proftpd_tcpaccesssysloglevels=${proftpd_tcpaccesssysloglevels:-"info warn"}
proftpd_tcpservicename=${proftpd_tcpservicename:-"ftpd"}
proftpd_timesgmt=${proftpd_timesgmt:-"off"}
proftpd_moddelay_enable=${proftpd_moddelay_enable:-"YES"}
proftpd_modwrap_enable=${proftpd_modwrap_enable:-"YES"}
proftpd_modctrls_controlsengine=${proftpd_modctrls_controlsengine:-"off"}
proftpd_modctrls_controlsacls=${proftpd_modctrls_controlsacls:-"all allow group wheel"}
proftpd_modctrls_controlsauthfreshness=${proftpd_modctrls_controlsauthfreshness:-"10"}
proftpd_modctrls_controlsmaxclients=${proftpd_modctrls_controlsmaxclients:-"5"}
proftpd_modctrls_controlslog=${proftpd_modctrls_controlslog:-"/var/log/${name}/controls.log"}
proftpd_modctrls_controlsinterval=${proftpd_modctrls_controlsinterval:-"10"}
proftpd_modban_bancontrolsacls=${proftpd_modban_bancontrolsacls:-"all allow group wheel"}
proftpd_modban_banlog=${proftpd_modban_banlog:-"/var/log/${name}/ban.log"}
proftpd_modban_banmessage=${proftpd_modban_banmessage:-"Host %a has been banned"}
proftpd_modban_bantable=${proftpd_modban_bantable:-"/var/run/${name}/ban.tab"}
command="/usr/local/sbin/${name}"
command_args="--config ${proftpd_config}"
pidfile="/var/run/${name}.pid"

proftpd_mkconf()
{
	local _welcomemsg _productname _certificate _privatekey _tmpfile _allowgroup

	# Check if required directories exists.
	[ ! -d "/var/run/${name}" ] && mkdir "/var/run/${name}"
	[ ! -d "/var/log/${name}" ] && mkdir "/var/log/${name}"

	# Check if required files exists.
	[ ! -e "${proftpd_delaytable}" ] && cat /dev/null > "${proftpd_delaytable}"
	[ ! -e "${proftpd_tcpaccessfilesallow}" ] && cat /dev/null > "${proftpd_tcpaccessfilesallow}"
	[ ! -e "${proftpd_tcpaccessfilesdeny}" ] && cat /dev/null > "${proftpd_tcpaccessfilesdeny}"
	[ ! -e "/var/log/utx.log" ] && touch /var/log/utx.log && chmod 644 /var/log/utx.log

	# Create welcome message file
	_welcomemsg=`configxml_get "//ftpd/banner"`
	if [ -z "${_welcomemsg}" ]; then
		_productname=`get_product_name`
		echo "Welcome to ${_productname} FTP Server" > ${proftpd_displaylogin}
	else
		echo ${_welcomemsg} | /usr/bin/uudecode -m -r > ${proftpd_displaylogin}
	fi

	# Create SSL/TLS certificate
	if configxml_isset //ftpd/tls; then
		_certificate=`configxml_get "//ftpd/certificate"`
		_privatekey=`configxml_get "//ftpd/privatekey"`

		# Create certificate and key files
		if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
			_tmpfile=/tmp/${name}$$.tmp

			echo "${_certificate}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsacertfile}
			/bin/chmod 0600 ${proftpd_tlsrsacertfile}

			echo "${_privatekey}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsakeyfile}
			/bin/chmod 0600 ${proftpd_tlsrsakeyfile}

			/bin/rm -f ${_tmpfile}
		fi
	fi

	_allowgroup=`configxml_get "//ftpd/allowgroup"`
	if [ -z "${_allowgroup}" ]; then
	    _allowgroup="ftp"
	fi
	/usr/local/bin/xml sel --template \
		--value-of "concat('ServerName \"',//system/hostname,' FTP Server\"')" --nl \
		--output "ServerType standalone" --nl \
		--output "DefaultServer on" --nl \
		--value-of "concat('DefaultAddress ',//system/hostname)" --nl \
		--output "UseIPv6 on" --nl \
		--match "(//ftpd[enable])[1]" \
			--value-of "concat('Port ',port)" --nl \
			--output "User nobody" --nl \
			--output "Group nogroup" --nl \
			--if "string-length(filemask) > 0" \
				--value-of "concat('Umask ',filemask,' ')" \
			--else \
				--output "Umask ${proftpd_umaskfile} " \
			--break \
			--if "string-length(directorymask) > 0" \
				--value-of "directorymask" --nl \
			--else \
				--output "${proftpd_umaskdirectory}" --nl \
			--break \
			--output "SyslogFacility ftp" --nl \
			--if "string-length(sysloglevel) > 0" \
				--value-of "concat('SyslogLevel ',sysloglevel)" --nl \
			--else \
				--output "SyslogLevel ${proftpd_sysloglevel}" --nl \
			--break \
			--output "MultilineRFC2228 ${proftpd_multilinerfc2228}" --nl \
			--output "DisplayLogin ${proftpd_displaylogin}" --nl \
			--output "DeferWelcome ${proftpd_deferwelcome}" --nl \
			--if "timeout[. > 0]" \
				--value-of "concat('TimeoutIdle ',timeout)" --nl \
			--break \
			--output "TimeoutLogin ${proftpd_timeoutlogin}" --nl \
			--output "TimeoutNoTransfer ${proftpd_timeoutnotransfer}" --nl \
			--output "TimeoutStalled ${proftpd_timeoutstalled}" --nl \
			--output "MaxInstances ${proftpd_maxinstances}" --nl \
			--value-of "concat('MaxClients ',numberclients)" --nl \
			--if "maxconperip[. > 0]" \
				--value-of "concat('MaxConnectionsPerHost ',maxconperip)" --nl \
			--break \
			--if "maxloginattempts[. > 0]" \
				--value-of "concat('MaxLoginAttempts  ',maxloginattempts )" --nl \
			--break \
			--output "DefaultTransferMode ${proftpd_defaulttransfermode}" --nl \
			--if "count(fxp) > 0" \
				--output "AllowForeignAddress on" --nl \
			--break \
			--if "string-length(pasv_address) > 0" \
				--value-of "concat('MasqueradeAddress ',pasv_address)" --nl \
			--break \
			--if "pasv_min_port[. != '0'] and pasv_max_port[. != '0']" \
				--value-of "concat('PassivePorts ',pasv_min_port,' ',pasv_max_port)" --nl \
			--break \
			--if "count(identlookups) > 0" \
				--output "IdentLookups on" --nl \
			--else \
				--output "IdentLookups off" --nl \
			--break \
			--if "count(usereversedns) > 0" \
				--output "UseReverseDNS on" --nl \
			--else \
				--output "UseReverseDNS off" --nl \
			--break \
			--if "count(localusersonly) = 0" \
				--nl \
				--output "<Anonymous ${proftpd_anonymousrootdir}>" --nl \
				--output "  User ftp" --nl \
				--output "  Group ftp" --nl \
				--output "  UserAlias anonymous ftp" --nl \
				--if "string-length(anonymousbandwidth/up) > 0" \
					--value-of "concat('  TransferRate STOR ',anonymousbandwidth/up)" --nl \
				--break \
				--if "string-length(anonymousbandwidth/down) > 0" \
					--value-of "concat('  TransferRate RETR ',anonymousbandwidth/down)" --nl \
				--break \
				--if "count(anonymousonly) > 0" \
					--output "  <Limit LOGIN>" --nl \
					--output "    AllowAll" --nl \
					--output "  </Limit>" --nl \
				--break \
				--output "</Anonymous>" --nl \
			--break \
			--if "count(localusersonly) > 0" \
				--nl \
				--output "<Limit LOGIN>" --nl \
				--output "  AllowGroup OR ${_allowgroup}" --nl \
				--if "count(permitrootlogin) > 0" \
					--output "  AllowGroup wheel" --nl \
				--break \
				--output "  DenyAll" --nl \
				--output "</Limit>" --nl \
			--break \
			--nl \
			--output "<Global>" --nl \
			--output "  RequireValidShell ${proftpd_requirevalidshell}" --nl \
			--if "count(chrooteveryone) > 0" \
				--output "  DefaultRoot ${proftpd_defaultrootdir} ${proftpd_defaultrootgroupexpr}" --nl \
			--break \
			--if "count(permitrootlogin) > 0" \
				--output "  RootLogin on" --nl \
			--break \
			--output "  AllowOverwrite on" --nl \
			--if "count(allowrestart) > 0" \
				--output "  AllowRetrieveRestart on" --nl \
				--output "  AllowStoreRestart on" --nl \
			--break \
			--output "  DeleteAbortedStores ${proftpd_deleteabortedstores}" --nl \
			--if "string-length(userbandwidth/up) > 0" \
				--value-of "concat('  TransferRate STOR ',userbandwidth/up)" --nl \
			--break \
			--if "string-length(userbandwidth/down) > 0" \
				--value-of "concat('  TransferRate RETR ',userbandwidth/down)" --nl \
			--break \
			--output "  TimesGMT ${proftpd_timesgmt}" --nl \
			--output "</Global>" --nl \
			--if "count(anonymousonly) > 0" \
				--nl \
				--output "<Limit LOGIN>" --nl \
				--if "count(permitrootlogin) > 0" \
					--output "  AllowGroup wheel" --nl \
				--break \
				--output "  DenyAll" --nl \
				--output "</Limit>" --nl \
			--break \
			--if "count(tls) > 0" \
				--nl \
				--output "<IfModule mod_tls.c>" --nl \
				--output "  TLSEngine on" --nl \
				--output "  TLSProtocol ${proftpd_tlsprotocol}" --nl \
				--output "  TLSOptions ${proftpd_tlsoptions}" --nl \
				--output "  TLSRSACertificateFile ${proftpd_tlsrsacertfile}" --nl \
				--output "  TLSRSACertificateKeyFile ${proftpd_tlsrsakeyfile}" --nl \
				--output "  TLSVerifyClient ${proftpd_tlsverifyclient}" --nl \
				--if "count(tlsrequired) > 0" \
					--output "  TLSRequired ${proftpd_tlsrequired}" --nl \
				--break \
				--output "</IfModule>" --nl \
			--break \
			--nl \
			--output "<IfModule mod_ban.c>" --nl \
			--if "count(mod_ban/enable) > 0" \
				--output "  BanEngine on" --nl \
			--else \
				--output "  BanEngine off" --nl \
			--break \
			--output "  BanControlsACLs ${proftpd_modban_bancontrolsacls}" --nl \
			--output "  BanLog ${proftpd_modban_banlog}" --nl \
			--output "  BanMessage ${proftpd_modban_banmessage}" --nl \
			--match "mod_ban/rule" \
				--value-of "concat('  BanOnEvent ',event,' ',occurrence,'/',timeinterval,' ',expire)" --nl \
			--break \
			--output "  BanTable ${proftpd_modban_bantable}" --nl \
			--output "</IfModule>" --nl \
			--nl \
			--match "auxparam" \
				--value-of "." --nl \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc > ${proftpd_config}

		# Add mod_delay
		if checkyesno proftpd_moddelay_enable; then
			cat <<EOF >> ${proftpd_config}
<IfModule mod_delay.c>
  DelayEngine on
  DelayTable "${proftpd_delaytable}"
</IfModule>

EOF
		fi

		# Add mod_wrap
		if [ 0 -ne `configxml_get_count "//ftpd/disabletcpwrapper"` ]; then
			proftpd_modwrap_enable="NO"
		fi
		if checkyesno proftpd_modwrap_enable; then
			cat <<EOF >> ${proftpd_config}
<IfModule mod_wrap.c>
  TCPAccessFiles ${proftpd_tcpaccessfilesallow} ${proftpd_tcpaccessfilesdeny}
  TCPAccessSyslogLevels ${proftpd_tcpaccesssysloglevels}
  TCPServiceName ${proftpd_tcpservicename}
</ifModule>

EOF
		fi

		# Add mod_ctrls.
		if [ "${proftpd_modctrls_controlsengine}" = "on" ]; then
			cat <<EOF >> ${proftpd_config}
<IfModule mod_ctrls.c>
  ControlsEngine ${proftpd_modctrls_controlsengine}
  ControlsACLs ${proftpd_modctrls_controlsacls}
  ControlsAuthFreshness
  ControlsMaxClients ${proftpd_modctrls_controlsmaxclients}
  ControlsLog ${proftpd_modctrls_controlslog}
  ControlsInterval ${proftpd_modctrls_controlsinterval}
</IfModule>

EOF
		fi
}

run_rc_command "$1"
