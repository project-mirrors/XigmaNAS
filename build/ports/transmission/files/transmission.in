#!/bin/sh
#
# Part of XigmaNAS (https://www.xigmanas.com).
# Copyright (c) 2018-2019 XigmaNAS <info@xigmanas.com>.
# All rights reserved.
#
# transmission service
#

# PROVIDE: transmission
# REQUIRE: DAEMON
# KEYWORD: shutdown
# XQUERY: --if "count(//bittorrent/enable) > 0" --output "0" --else --output "1" --break
# RCVAR: transmission

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="transmission"
desc="transmission service"
rcvar=transmission_enable

load_rc_config "${name}"

# Custom commands
start_precmd="transmission_prestart"
start_postcmd="transmission_poststart"
updateblocklist_cmd="transmission_updateblocklist"
extra_commands="updateblocklist"

# Defaults
transmission_enable=${transmission_enable:-"NO"}
transmission_allowed=${transmission_allowed:-"*.*.*.*"}
transmission_blocklist=${transmission_blocklist:-"NO"}
transmission_blocklist_url=${transmission_blocklist_url:-"http://list.iblocklist.com/?list=ydxerpxkpcfqjaybcssw&fileformat=p2p&archiveformat=gz"}
transmission_user=${transmission_user:-"transmission"}
transmission_umask=${transmission_umask:-"0002"}
transmission_preallocation=${transmission_preallocation:-"1"}

command="/usr/local/bin/${name}-daemon"
command_args="-a ${transmission_allowed}"

safe_shellquote()
{
	local _result

	# replace inside quote " => "\\\"", ' => '\''
	_result=`echo "$@" | sed -e 's/"/"\\\\\\\\\\\\""/g' -e "s/'/'\\\\\\''/g"`
	# return quoted string
	echo "\"\\\"\"${_result}\"\\\"\""
}

safe_xmlescape()
{
	local _result

	_result="$@"
	# replace < > & => &lt;&gt;&amp;
	#_result=`echo "${_result}" | sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/\&/\&amp;/g'`
	# replace inside XPath " => &quot;, ' => ',"'",';,
	#_result=`echo "${_result}" | sed -e 's/"/\&quot;/g' -e "s/'/',\&quot;'\&quot;,'/g"`
	# return escaped string
	echo "${_result}"
}

transmission_prestart()
{
	local _command_args _umask _preallocation
	local _homedir _password _configfile
	local _downloaddir _configdir _watchdir _incompletedir

	# get user's homedirectory
	_homedir=`su -l "${transmission_user}" -c 'echo $HOME'`
	[ -z "${_homedir}" ] && _homedir="/home/transmission"

	# save quotes in rc script and login shell and sh
	_password=`configxml_get "//bittorrent/password"`
	_password=`safe_shellquote "${_password}"`
	_downloaddir=`configxml_get "//bittorrent/downloaddir"`
	_downloaddir=`safe_shellquote "${_downloaddir}"`
	_configdir=`configxml_get "//bittorrent/configdir"`
	if [ -z "${_configdir}" ]; then
	    # use default directory
	    _configdir="${_homedir}/.config/${name}-daemon"
	fi
	if [ ! -d "${_configdir}" ]; then
	    # create config directory
	    eval "su -m \"${transmission_user}\" -c 'sh -c \"mkdir -p `safe_shellquote "${_configdir}"`\"'"
	    if [ ! -d "${_configdir}" ]; then
			echo "configdir fail: ${_configdir}" 1>&2
			exit 1
	    fi
	fi
	_configdir=`safe_shellquote "${_configdir}"`
	_watchdir=`configxml_get "//bittorrent/watchdir"`
	_watchdir=`safe_shellquote "${_watchdir}"`
	_incompletedir=`configxml_get "//bittorrent/incompletedir"`
	_incompletedir=`safe_shellquote "${_incompletedir}"`

	# escape XML/XSLT/XPath special
	_password=`safe_xmlescape "${_password}"`
	_downloaddir=`safe_xmlescape "${_downloaddir}"`
	_configdir=`safe_xmlescape "${_configdir}"`
	_watchdir=`safe_xmlescape "${_watchdir}"`
	_incompletedir=`safe_xmlescape "${_incompletedir}"`

	# Create command args line.
	_command_args=`/usr/local/bin/xml sel --template \
		--match "//bittorrent" \
			--if "count(authrequired) > 0" \
				--output " -t" \
				--if "string-length(username) > 0" \
					--value-of "concat(' -u ',username)" \
				--break \
				--if "string-length(password) > 0" \
					--output " -v ${_password}" \
				--break \
			--else \
				--output " -T" \
			--break \
			--if "string-length(downloaddir) > 0" \
				--output " -w ${_downloaddir}" \
			--break \
			--if "string-length(port) > 0" \
				--value-of "concat(' -p ',port)" \
			--break \
			--output " -g ${_configdir}" \
			--if "string-length(peerport) > 0" \
				--value-of "concat(' -P ',peerport)" \
			--break \
			--if "count(portforwarding) > 0" \
				--output " -m" \
			--else \
				--output " -M" \
			--break \
			--if "string-length(watchdir) > 0" \
				--output " -c ${_watchdir}" \
			--else \
				--output " -C" \
			--break \
			--if "string-length(incompletedir) > 0" \
				--output " --incomplete-dir ${_incompletedir}" \
			--else \
				--output " --no-incomplete-dir" \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`

	if checkyesno transmission_blocklist; then
		_command_args="${_command_args} -b"
	else
		_command_args="${_command_args} -B"
	fi

	# Check the effective user.
	debug "command_args: $_command_args"
	if [ "${transmission_user}" = "`/usr/bin/id -un`" ]; then
	    # eval first level quote
	    _command_args=`eval echo "${_command_args}"`
	    debug "command_args: $_command_args"
	fi

	command_args="${command_args} ${_command_args}"

	# Set the umask.
	_umask=`configxml_get "//bittorrent/umask"`
	_umask=${_umask:-"${transmission_umask}"}

	debug "umask: $_umask"
	#umask ${_umask}

	# Set the preallocation.
	_preallocation=`configxml_get "//bittorrent/preallocation"`
	_preallocation=${_preallocation:-"${transmission_preallocation}"}

	debug "preallocation: $_preallocation"
	#preallocation ${_preallocation}

	# Get the configuration directory.
	_configdir=`configxml_get "//bittorrent/configdir"`
	[ -z "${_configdir}" ] && _configdir="${_homedir}/.config/${name}-daemon"
	# Check configuration's umask.
	_configfile="${_configdir}/settings.json"
	if [ ! -f "${_configfile}" ]; then
	    # create default settings
	    if [ "${transmission_user}" = "`/usr/bin/id -un`" ]; then
			eval 'sh -c "${command} -d ${command_args} > "${_configfile}.new" 2>&1"'
	    else
			eval "su -m \"${transmission_user}\" -c 'sh -c \"${command} -d ${command_args} > `safe_shellquote "${_configfile}.new"` 2>&1\"'"
	    fi
	    if [ ! -f "${_configfile}" ]; then
			# copy config
			chmod 600 "${_configfile}.new"
			mv "${_configfile}.new" ${_configfile}
	    else
			# use new created file
			rm -f "${_configfile}.new"
	    fi
	fi
	if [ -f "${_configfile}" ]; then
	    # replace umask
	    _umask=`printf "%d" "0${_umask}"`
	    debug "replace umask: $_umask"
	    sed -i.bak "/\"umask\":/ s/:[^0-9]*[0-9]*\(.*\)/: ${_umask}\1/" "${_configfile}" && rm "${_configfile}.bak"
	fi
	# Check configuration's preallocation.
	_configfile="${_configdir}/settings.json"
	if [ -f "${_configfile}" ]; then
	    # replace preallocation
	    _preallocation=`configxml_get  "//bittorrent/preallocation"`
	    debug "replace preallocation: $_preallocation"
	    sed -i.bak "s/\s*\"preallocation\".*$/\"preallocation\": ${_preallocation},/" "${_configfile}" && rm "${_configfile}.bak"
	fi
}

transmission_poststart()
{
	local _command_args

	_command_args=`/usr/local/bin/xml sel --template \
		--match "//bittorrent" \
			--if "string-length(port) > 0" \
				--value-of "concat(' ',port)" \
			--break \
			--if "count(pex) > 0" \
				--output " -x" \
			--else \
				--output " -X" \
			--break \
			--if "count(dht) > 0" \
				--output " -o" \
			--else \
				--output " -O" \
			--break \
			--if "encryption[. = '0']" \
				--output " -et" \
			--elif "encryption[. = '1']" \
				--output " -ep" \
			--elif "encryption[. = '2']" \
				--output " -er" \
			--break \
			--if "string-length(uplimit) > 0" \
				--value-of "concat(' -u ',uplimit)" \
			--else \
				--output " -U" \
			--break \
			--if "string-length(downlimit) > 0" \
				--value-of "concat(' -d ',downlimit)" \
			--else \
				--output " -D" \
			--break \
			--if "count(authrequired) > 0" \
				--if "string-length(username) > 0 and string-length(password) > 0" \
					--value-of "concat(' -n ',username,':',password)" \
				--break \
			--break \
			--if "string-length(extraoptions) > 0" \
				--value-of "concat(' ',extraoptions)" \
			--break \
		--break \
		${configxml_file} | /usr/local/bin/xml unesc`

	sleep 1; /usr/local/bin/transmission-remote ${_command_args} >/dev/null 2>&1
}

transmission_updateblocklist()
{
	local _configdir _md5 _file
	local _homedir

	# get user's home directory
	_homedir=`su -l "${transmission_user}" -c 'echo $HOME'`
	[ -z "${_homedir}" ] && _homedir="/home/transmission"

	# Get the configuration directory.
	_configdir=`configxml_get "//bittorrent/configdir"`
	[ -z "${_configdir}" ] && _configdir="${_homedir}/.config/${name}-daemon"

	# Check if blocklists folder exists, create it if necessary. Then
	# change directory.
	[ ! -e "${_configdir}/blocklists" ] && mkdir "${_configdir}/blocklists"
	cd "${_configdir}/blocklists"

	# Download blocklist file.
	_file=${transmission_blocklist_url##*/}
	[ -f "${_file}" ] && _md5=$(md5 -q "${_file}")
	fetch -ampw 5 "${transmission_blocklist_url}"
	if [ 0 -ne $? ]; then
		logger -s -t "${name}" "Failed to fetch blocklist ${transmission_blocklist_url}"
		exit 1
	fi

	# Has the file been updated?
	if [ "$(md5 -q ${_file})" = "${_md5:=0}" ]; then
		logger -s -t "${name}" "Blocklist is up-to-date"
		exit 1
	fi

	# Extract file content.
	gzip -dfkq ${_file};
	if [ 0 -ne $? ]; then
		logger -s -t "${name}" "Failed to extract blocklist update"
		exit 1
	fi

	logger -s -t "${name}" "Blocklist has been updated successful"
}

run_rc_command "$1"
